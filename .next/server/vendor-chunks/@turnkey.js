"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey";
exports.ids = ["vendor-chunks/@turnkey"];
exports.modules = {

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),\n/* harmony export */   pointDecode: () => (/* reexport safe */ _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__.pointDecode),\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// `window.document` ensures that we're in a browser context\n// and `crypto.subtle` ensures that it supports the web crypto APIs\n// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isCryptoEnabledBrowser = typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof crypto !== \"undefined\" &&\n    typeof crypto.subtle !== \"undefined\";\n// We check `process.versions.node`\n// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isNode = typeof process !== \"undefined\" &&\n    process.versions != null &&\n    process.versions.node != null;\n/**\n * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.\n */\nconst signWithApiKey = async (input) => {\n    if (isCryptoEnabledBrowser) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else if (isNode) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else {\n        // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation\n        // This is the case for old browsers and react native environments\n        const fn = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@turnkey\"), __webpack_require__.e(\"vendor-chunks/@noble\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n};\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass ApiKeyStamper {\n    constructor(config) {\n        this.apiPublicKey = config.apiPublicKey;\n        this.apiPrivateKey = config.apiPrivateKey;\n    }\n    async stamp(payload) {\n        const signature = await signWithApiKey({\n            publicKey: this.apiPublicKey,\n            privateKey: this.apiPrivateKey,\n            content: payload,\n        });\n        const stamp = {\n            publicKey: this.apiPublicKey,\n            scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n            signature: signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTREO0FBQ0g7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsOE1BQXlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixnTkFBMEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxUUFBc0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMEVBQXVCO0FBQ3JEO0FBQ0E7QUFDQTs7QUFFeUM7QUFDekMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxhcGkta2V5LXN0YW1wZXJcXGRpc3RcXGluZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcbmV4cG9ydCB7IHBvaW50RGVjb2RlIH0gZnJvbSAnLi90aW5rL2VsbGlwdGljX2N1cnZlcy5tanMnO1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuLy8gSGVhZGVyIG5hbWUgZm9yIGFuIEFQSSBrZXkgc3RhbXBcbmNvbnN0IHN0YW1wSGVhZGVyTmFtZSA9IFwiWC1TdGFtcFwiO1xuLy8gYHdpbmRvdy5kb2N1bWVudGAgZW5zdXJlcyB0aGF0IHdlJ3JlIGluIGEgYnJvd3NlciBjb250ZXh0XG4vLyBhbmQgYGNyeXB0by5zdWJ0bGVgIGVuc3VyZXMgdGhhdCBpdCBzdXBwb3J0cyB0aGUgd2ViIGNyeXB0byBBUElzXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZmxleGRpbmVzaC9icm93c2VyLW9yLW5vZGUvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LnRzXG5jb25zdCBpc0NyeXB0b0VuYWJsZWRCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgY3J5cHRvICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIGNyeXB0by5zdWJ0bGUgIT09IFwidW5kZWZpbmVkXCI7XG4vLyBXZSBjaGVjayBgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlYFxuLy8gVGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmxleGRpbmVzaC9icm93c2VyLW9yLW5vZGUvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LnRzXG5jb25zdCBpc05vZGUgPSB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHByb2Nlc3MudmVyc2lvbnMgIT0gbnVsbCAmJlxuICAgIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPSBudWxsO1xuLyoqXG4gKiBTaWduYXR1cmUgZnVuY3Rpb24gYWJzdHJhY3RpbmcgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gTm9kZUpTIGFuZCB3ZWIgZW52aXJvbm1lbnRzIGZvciBzaWduaW5nIHdpdGggQVBJIGtleXMuXG4gKi9cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgaWYgKGlzQ3J5cHRvRW5hYmxlZEJyb3dzZXIpIHtcbiAgICAgICAgY29uc3QgZm4gPSBhd2FpdCBpbXBvcnQoJy4vd2ViY3J5cHRvLm1qcycpLnRoZW4oKG0pID0+IG0uc2lnbldpdGhBcGlLZXkpO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05vZGUpIHtcbiAgICAgICAgY29uc3QgZm4gPSBhd2FpdCBpbXBvcnQoJy4vbm9kZWNyeXB0by5tanMnKS50aGVuKChtKSA9PiBtLnNpZ25XaXRoQXBpS2V5KTtcbiAgICAgICAgcmV0dXJuIGZuKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgTm9kZUpTIG9yIHdlYiBjcnlwdG8gYXQgb3VyIGRpc3Bvc2FsLCBkZWZhdWx0IHRvIHB1cmUgSlMgaW1wbGVtZW50YXRpb25cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2FzZSBmb3Igb2xkIGJyb3dzZXJzIGFuZCByZWFjdCBuYXRpdmUgZW52aXJvbm1lbnRzXG4gICAgICAgIGNvbnN0IGZuID0gYXdhaXQgaW1wb3J0KCcuL3B1cmVqcy5tanMnKS50aGVuKChtKSA9PiBtLnNpZ25XaXRoQXBpS2V5KTtcbiAgICAgICAgcmV0dXJuIGZuKGlucHV0KTtcbiAgICB9XG59O1xuLyoqXG4gKiBTdGFtcGVyIHRvIHVzZSB3aXRoIGBAdHVybmtleS9odHRwYCdzIGBUdXJua2V5Q2xpZW50YFxuICovXG5jbGFzcyBBcGlLZXlTdGFtcGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5hcGlQdWJsaWNLZXkgPSBjb25maWcuYXBpUHVibGljS2V5O1xuICAgICAgICB0aGlzLmFwaVByaXZhdGVLZXkgPSBjb25maWcuYXBpUHJpdmF0ZUtleTtcbiAgICB9XG4gICAgYXN5bmMgc3RhbXAocGF5bG9hZCkge1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzaWduV2l0aEFwaUtleSh7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IHRoaXMuYXBpUHVibGljS2V5LFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogdGhpcy5hcGlQcml2YXRlS2V5LFxuICAgICAgICAgICAgY29udGVudDogcGF5bG9hZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN0YW1wID0ge1xuICAgICAgICAgICAgcHVibGljS2V5OiB0aGlzLmFwaVB1YmxpY0tleSxcbiAgICAgICAgICAgIHNjaGVtZTogXCJTSUdOQVRVUkVfU0NIRU1FX1RLX0FQSV9QMjU2XCIsXG4gICAgICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyTmFtZTogc3RhbXBIZWFkZXJOYW1lLFxuICAgICAgICAgICAgc3RhbXBIZWFkZXJWYWx1ZTogc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoSlNPTi5zdHJpbmdpZnkoc3RhbXApKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFwaUtleVN0YW1wZXIsIHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n\n\n\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0\n        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey\n        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({\n            uncompressedPrivateKeyHex: privateKey,\n            compressedPublicKeyHex: publicKey,\n        }),\n        format: \"jwk\",\n    });\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"SHA256\");\n    sign.write(Buffer.from(content));\n    sign.end();\n    return sign.sign(privateKeyObject, \"hex\");\n};\n\n\n//# sourceMappingURL=nodecrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvbm9kZWNyeXB0by5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ3VCOztBQUV4RDtBQUNBLFlBQVksaUNBQWlDO0FBQzdDLDZCQUE2QixvREFBdUI7QUFDcEQ7QUFDQTtBQUNBLGFBQWEscUVBQXlCO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLDhDQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxhcGkta2V5LXN0YW1wZXJcXGRpc3RcXG5vZGVjcnlwdG8ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB7IGNvbnRlbnQsIHB1YmxpY0tleSwgcHJpdmF0ZUtleSB9ID0gaW5wdXQ7XG4gICAgY29uc3QgcHJpdmF0ZUtleU9iamVjdCA9IGNyeXB0by5jcmVhdGVQcml2YXRlS2V5KHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtLSB0aGUga2V5IGNhbiBiZSBhIEpXSyBvYmplY3Qgc2luY2UgTm9kZSB2MTUuMTIuMFxuICAgICAgICAvLyBodHRwczovL25vZGVqcy5vcmcvYXBpL2NyeXB0by5odG1sI2NyeXB0b2NyZWF0ZXByaXZhdGVrZXlrZXlcbiAgICAgICAga2V5OiBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrKHtcbiAgICAgICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXg6IHByaXZhdGVLZXksXG4gICAgICAgICAgICBjb21wcmVzc2VkUHVibGljS2V5SGV4OiBwdWJsaWNLZXksXG4gICAgICAgIH0pLFxuICAgICAgICBmb3JtYXQ6IFwiandrXCIsXG4gICAgfSk7XG4gICAgY29uc3Qgc2lnbiA9IGNyeXB0by5jcmVhdGVTaWduKFwiU0hBMjU2XCIpO1xuICAgIHNpZ24ud3JpdGUoQnVmZmVyLmZyb20oY29udGVudCkpO1xuICAgIHNpZ24uZW5kKCk7XG4gICAgcmV0dXJuIHNpZ24uc2lnbihwcml2YXRlS2V5T2JqZWN0LCBcImhleFwiKTtcbn07XG5cbmV4cG9ydCB7IHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlY3J5cHRvLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(ssr)/./node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/./node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n\nconst signWithApiKey = async (input) => {\n    const publicKey = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.getPublicKey(input.privateKey, true);\n    // Public key in the usual 02 or 03 + 64 hex digits\n    const publicKeyString = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(publicKey);\n    if (publicKeyString != input.publicKey) {\n        throw new Error(`Bad API key. Expected to get public key ${input.publicKey}, got ${publicKeyString}`);\n    }\n    const hash = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.createHash)().update(input.content).digest();\n    const signature = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.sign(hash, input.privateKey);\n    return signature.toDERHex();\n};\n\n\n//# sourceMappingURL=purejs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvcHVyZWpzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0s7QUFDVzs7QUFFMUQ7QUFDQSxzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQSw0QkFBNEIsd0VBQXFCO0FBQ2pEO0FBQ0EsbUVBQW1FLGdCQUFnQixRQUFRLGdCQUFnQjtBQUMzRztBQUNBLGlCQUFpQiw2REFBVTtBQUMzQixzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxhcGkta2V5LXN0YW1wZXJcXGRpc3RcXHB1cmVqcy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcDI1NiB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvcDI1Nic7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnc2hhMjU2LXVpbnQ4YXJyYXknO1xuaW1wb3J0IHsgdWludDhBcnJheVRvSGV4U3RyaW5nIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuXG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IHAyNTYuZ2V0UHVibGljS2V5KGlucHV0LnByaXZhdGVLZXksIHRydWUpO1xuICAgIC8vIFB1YmxpYyBrZXkgaW4gdGhlIHVzdWFsIDAyIG9yIDAzICsgNjQgaGV4IGRpZ2l0c1xuICAgIGNvbnN0IHB1YmxpY0tleVN0cmluZyA9IHVpbnQ4QXJyYXlUb0hleFN0cmluZyhwdWJsaWNLZXkpO1xuICAgIGlmIChwdWJsaWNLZXlTdHJpbmcgIT0gaW5wdXQucHVibGljS2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQmFkIEFQSSBrZXkuIEV4cGVjdGVkIHRvIGdldCBwdWJsaWMga2V5ICR7aW5wdXQucHVibGljS2V5fSwgZ290ICR7cHVibGljS2V5U3RyaW5nfWApO1xuICAgIH1cbiAgICBjb25zdCBoYXNoID0gY3JlYXRlSGFzaCgpLnVwZGF0ZShpbnB1dC5jb250ZW50KS5kaWdlc3QoKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBwMjU2LnNpZ24oaGFzaCwgaW5wdXQucHJpdmF0ZUtleSk7XG4gICAgcmV0dXJuIHNpZ25hdHVyZS50b0RFUkhleCgpO1xufTtcblxuZXhwb3J0IHsgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1cmVqcy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toByteString: () => (/* binding */ toByteString),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converts the hex string to a byte array.\n *\n * @param hex the input\n * @return the byte array output\n * @throws {!Error}\n * @static\n */\nfunction fromHex(hex) {\n    if (hex.length % 2 != 0) {\n        throw new Error(\"Hex string length must be multiple of 2\");\n    }\n    const arr = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n    return arr;\n}\n/**\n * Converts a byte array to hex.\n *\n * @param bytes the byte array input\n * @return hex the output\n * @static\n */\nfunction toHex(bytes) {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        const hexByte = bytes[i].toString(16);\n        result += hexByte.length > 1 ? hexByte : \"0\" + hexByte;\n    }\n    return result;\n}\n/**\n * Base64 encode a byte array.\n *\n * @param bytes the byte array input\n * @param opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return base64 output\n * @static\n */\nfunction toBase64(bytes, opt_webSafe) {\n    const encoded = btoa(\n    /* padding */\n    toByteString(bytes)).replace(/=/g, \"\");\n    if (opt_webSafe) {\n        return encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    return encoded;\n}\n/**\n * Turns a byte array into the string given by the concatenation of the\n * characters to which the numbers correspond. Each byte is corresponding to a\n * character. Does not support multi-byte characters.\n *\n * @param bytes Array of numbers representing\n *     characters.\n * @return Stringification of the array.\n */\nfunction toByteString(bytes) {\n    let str = \"\";\n    for (let i = 0; i < bytes.length; i += 1) {\n        str += String.fromCharCode(bytes[i]);\n    }\n    return str;\n}\n\n\n//# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdGluay9ieXRlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxhcGkta2V5LXN0YW1wZXJcXGRpc3RcXHRpbmtcXGJ5dGVzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2J5dGVzLnRzXG4gKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbi8qKlxuICogQ29udmVydHMgdGhlIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBoZXggdGhlIGlucHV0XG4gKiBAcmV0dXJuIHRoZSBieXRlIGFycmF5IG91dHB1dFxuICogQHRocm93cyB7IUVycm9yfVxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiBmcm9tSGV4KGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoICUgMiAhPSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhleCBzdHJpbmcgbGVuZ3RoIG11c3QgYmUgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICB9XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGFycltpIC8gMl0gPSBwYXJzZUludChoZXguc3Vic3RyaW5nKGksIGkgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGJ5dGUgYXJyYXkgdG8gaGV4LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHJldHVybiBoZXggdGhlIG91dHB1dFxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiB0b0hleChieXRlcykge1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaGV4Qnl0ZSA9IGJ5dGVzW2ldLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcmVzdWx0ICs9IGhleEJ5dGUubGVuZ3RoID4gMSA/IGhleEJ5dGUgOiBcIjBcIiArIGhleEJ5dGU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEJhc2U2NCBlbmNvZGUgYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHBhcmFtIG9wdF93ZWJTYWZlIFRydWUgaW5kaWNhdGVzIHdlIHNob3VsZCB1c2UgdGhlIGFsdGVybmF0aXZlXG4gKiAgICAgYWxwaGFiZXQsIHdoaWNoIGRvZXMgbm90IHJlcXVpcmUgZXNjYXBpbmcgZm9yIHVzZSBpbiBVUkxzLlxuICogQHJldHVybiBiYXNlNjQgb3V0cHV0XG4gKiBAc3RhdGljXG4gKi9cbmZ1bmN0aW9uIHRvQmFzZTY0KGJ5dGVzLCBvcHRfd2ViU2FmZSkge1xuICAgIGNvbnN0IGVuY29kZWQgPSBidG9hKFxuICAgIC8qIHBhZGRpbmcgKi9cbiAgICB0b0J5dGVTdHJpbmcoYnl0ZXMpKS5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIGlmIChvcHRfd2ViU2FmZSkge1xuICAgICAgICByZXR1cm4gZW5jb2RlZC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkO1xufVxuLyoqXG4gKiBUdXJucyBhIGJ5dGUgYXJyYXkgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLiBFYWNoIGJ5dGUgaXMgY29ycmVzcG9uZGluZyB0byBhXG4gKiBjaGFyYWN0ZXIuIERvZXMgbm90IHN1cHBvcnQgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLlxuICpcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZ1xuICogICAgIGNoYXJhY3RlcnMuXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQnl0ZVN0cmluZyhieXRlcykge1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyBmcm9tSGV4LCB0b0Jhc2U2NCwgdG9CeXRlU3RyaW5nLCB0b0hleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointDecode: () => (/* binding */ pointDecode)\n/* harmony export */ });\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\");\n\n\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts\n * - The implementation of integerToByteArray has been modified to augment the resulting byte array to a certain length.\n * - The implementation of PointDecode has been modified to decode both compressed and uncompressed points by checking for correct format\n * - Method isP256CurvePoint added to check whether an uncompressed point is valid\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * P-256 only\n */\nfunction getModulus() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"115792089210356248762697446949407573530086143415290314195533631308\" +\n        \"867097853951\");\n}\n/**\n * P-256 only\n */\nfunction getB() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n}\n/** Converts byte array to bigint. */\nfunction byteArrayToInteger(bytes) {\n    return BigInt(\"0x\" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));\n}\n/** Converts bigint to byte array. */\nfunction integerToByteArray(i, length) {\n    const input = i.toString(16);\n    const numHexChars = length * 2;\n    let padding = \"\";\n    if (numHexChars < input.length) {\n        throw new Error(`cannot pack integer with ${input.length} hex chars into ${length} bytes`);\n    }\n    else {\n        padding = \"0\".repeat(numHexChars - input.length);\n    }\n    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(padding + input);\n}\n/** Returns true iff the ith bit (in lsb order) of n is set. */\nfunction testBit(n, i) {\n    const m = BigInt(1) << BigInt(i);\n    return (n & m) !== BigInt(0);\n}\n/**\n * Computes a modular exponent.  Since JavaScript BigInt operations are not\n * constant-time, information about the inputs could leak.  Therefore, THIS\n * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * @param b base\n * @param exp exponent\n * @param p modulus\n * @return b^exp modulo p\n */\nfunction modPow(b, exp, p) {\n    if (exp === BigInt(0)) {\n        return BigInt(1);\n    }\n    let result = b;\n    const exponentBitString = exp.toString(2);\n    for (let i = 1; i < exponentBitString.length; ++i) {\n        result = (result * result) % p;\n        if (exponentBitString[i] === \"1\") {\n            result = (result * b) % p;\n        }\n    }\n    return result;\n}\n/**\n * Computes a square root modulo an odd prime.  Since timing and exceptions can\n * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR\n * POINT DECOMPRESSION.\n *\n * @param x square\n * @param p prime modulus\n * @return square root of x modulo p\n */\nfunction modSqrt(x, p) {\n    if (p <= BigInt(0)) {\n        throw new Error(\"p must be positive\");\n    }\n    const base = x % p;\n    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy\n    // p % 4 == 3.  However, although currently a no-op, the following check\n    // should be left in place in case other curves are supported in the future.\n    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {\n        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)\n        // q = (p + 1) / 4\n        const q = (p + BigInt(1)) >> BigInt(2);\n        const squareRoot = modPow(base, q, p);\n        if ((squareRoot * squareRoot) % p !== base) {\n            throw new Error(\"could not find a modular square root\");\n        }\n        return squareRoot;\n    }\n    // Skipping other elliptic curve types that require Cipolla's algorithm.\n    throw new Error(\"unsupported modulus value\");\n}\n/**\n * Computes the y-coordinate of a point on an elliptic curve given its\n * x-coordinate.  Since timing and exceptions can leak information about the\n * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param lsb least significant bit of the y-coordinate\n * @return y-coordinate\n */\nfunction getY(x, lsb) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    let y = modSqrt(rhs, p);\n    if (lsb !== testBit(y, 0)) {\n        y = (p - y) % p;\n    }\n    return y;\n}\n/**\n *\n * Given x and y coordinates of a JWK, checks whether these are valid points on\n * the P-256 elliptic curve.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param y y-coordinate\n * @return boolean validity\n */\nfunction isP256CurvePoint(x, y) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    const lhs = y ** BigInt(2) % p;\n    return lhs === rhs;\n}\n/**\n * Decodes a public key in _compressed_ OR _uncompressed_ format.\n * Augmented to ensure that the x and y components are padded to fit 32 bytes.\n *\n * P-256 only\n */\nfunction pointDecode(point) {\n    const fieldSize = fieldSizeInBytes();\n    const compressedLength = fieldSize + 1;\n    const uncompressedLength = 2 * fieldSize + 1;\n    if (point.length !== compressedLength &&\n        point.length !== uncompressedLength) {\n        throw new Error(\"Invalid length: point is not in compressed or uncompressed format\");\n    }\n    // Decodes point if its length and first bit match the compressed format\n    if ((point[0] === 2 || point[0] === 3) && point.length == compressedLength) {\n        const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).\n        const x = byteArrayToInteger(point.subarray(1, point.length));\n        const p = getModulus();\n        if (x < BigInt(0) || x >= p) {\n            throw new Error(\"x is out of range\");\n        }\n        const y = getY(x, lsb);\n        const result = {\n            kty: \"EC\",\n            crv: \"P-256\",\n            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32), /* websafe */ true),\n            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32), /* websafe */ true),\n            ext: true,\n        };\n        return result;\n        // Decodes point if its length and first bit match the uncompressed format\n    }\n    else if (point[0] === 4 && point.length == uncompressedLength) {\n        const x = byteArrayToInteger(point.subarray(1, fieldSize + 1));\n        const y = byteArrayToInteger(point.subarray(fieldSize + 1, 2 * fieldSize + 1));\n        const p = getModulus();\n        if (x < BigInt(0) ||\n            x >= p ||\n            y < BigInt(0) ||\n            y >= p ||\n            !isP256CurvePoint(x, y)) {\n            throw new Error(\"invalid uncompressed x and y coordinates\");\n        }\n        const result = {\n            kty: \"EC\",\n            crv: \"P-256\",\n            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32), /* websafe */ true),\n            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32), /* websafe */ true),\n            ext: true,\n        };\n        return result;\n    }\n    throw new Error(\"invalid format\");\n}\n/**\n * P-256 only\n */\nfunction fieldSizeInBytes() {\n    return 32;\n}\n\n\n//# sourceMappingURL=elliptic_curves.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayFromHexString)(compressedPublicKeyHex));\n    // Ensure that d is sufficiently padded\n    jwk.d = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.hexStringToBase64url)(uncompressedPrivateKeyHex, _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_JWK_MEMBER_BYTE_LENGTH);\n    return jwk;\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUN5RDs7QUFFbEg7QUFDQSxZQUFZLG9EQUFvRDtBQUNoRSxnQkFBZ0Isc0VBQVcsQ0FBQywwRUFBdUI7QUFDbkQ7QUFDQSxZQUFZLHVFQUFvQiw0QkFBNEIsNkVBQThCO0FBQzFGO0FBQ0E7O0FBRXFDO0FBQ3JDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhY2hhXFxUZXN0XFxldGhnbFxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcYXBpLWtleS1zdGFtcGVyXFxkaXN0XFx1dGlscy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcG9pbnREZWNvZGUgfSBmcm9tICcuL3RpbmsvZWxsaXB0aWNfY3VydmVzLm1qcyc7XG5pbXBvcnQgeyB1aW50OEFycmF5RnJvbUhleFN0cmluZywgaGV4U3RyaW5nVG9CYXNlNjR1cmwsIERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuZnVuY3Rpb24gY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayhpbnB1dCkge1xuICAgIGNvbnN0IHsgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgY29tcHJlc3NlZFB1YmxpY0tleUhleCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgandrID0gcG9pbnREZWNvZGUodWludDhBcnJheUZyb21IZXhTdHJpbmcoY29tcHJlc3NlZFB1YmxpY0tleUhleCkpO1xuICAgIC8vIEVuc3VyZSB0aGF0IGQgaXMgc3VmZmljaWVudGx5IHBhZGRlZFxuICAgIGp3ay5kID0gaGV4U3RyaW5nVG9CYXNlNjR1cmwodW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgREVGQVVMVF9KV0tfTUVNQkVSX0JZVEVfTEVOR1RIKTtcbiAgICByZXR1cm4gandrO1xufVxuXG5leHBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvd2ViY3J5cHRvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDRTs7QUFFMUQ7QUFDQTtBQUNBLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0EsWUFBWSxvREFBb0Q7QUFDaEUsZ0JBQWdCLHFFQUF5QjtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLHdFQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhY2hhXFxUZXN0XFxldGhnbFxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcYXBpLWtleS1zdGFtcGVyXFxkaXN0XFx3ZWJjcnlwdG8ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyB1aW50OEFycmF5VG9IZXhTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGVudCwgcHVibGljS2V5LCBwcml2YXRlS2V5IH0gPSBpbnB1dDtcbiAgICBjb25zdCBrZXkgPSBhd2FpdCBpbXBvcnRUdXJua2V5QXBpS2V5KHtcbiAgICAgICAgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleDogcHJpdmF0ZUtleSxcbiAgICAgICAgY29tcHJlc3NlZFB1YmxpY0tleUhleDogcHVibGljS2V5LFxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBzaWduTWVzc2FnZSh7IGtleSwgY29udGVudCB9KTtcbn07XG5hc3luYyBmdW5jdGlvbiBpbXBvcnRUdXJua2V5QXBpS2V5KGlucHV0KSB7XG4gICAgY29uc3QgeyB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LCBjb21wcmVzc2VkUHVibGljS2V5SGV4IH0gPSBpbnB1dDtcbiAgICBjb25zdCBqd2sgPSBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrKHtcbiAgICAgICAgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCxcbiAgICAgICAgY29tcHJlc3NlZFB1YmxpY0tleUhleCxcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXCJqd2tcIiwgandrLCB7XG4gICAgICAgIG5hbWU6IFwiRUNEU0FcIixcbiAgICAgICAgbmFtZWRDdXJ2ZTogXCJQLTI1NlwiLFxuICAgIH0sIGZhbHNlLCAvLyBub3QgZXh0cmFjdGFibGVcbiAgICBbXCJzaWduXCJdIC8vIGFsbG93IHNpZ25pbmdcbiAgICApO1xufVxuYXN5bmMgZnVuY3Rpb24gc2lnbk1lc3NhZ2UoaW5wdXQpIHtcbiAgICBjb25zdCB7IGtleSwgY29udGVudCB9ID0gaW5wdXQ7XG4gICAgY29uc3Qgc2lnbmF0dXJlSWVlZTEzNjMgPSBhd2FpdCBjcnlwdG8uc3VidGxlLnNpZ24oe1xuICAgICAgICBuYW1lOiBcIkVDRFNBXCIsXG4gICAgICAgIGhhc2g6IFwiU0hBLTI1NlwiLFxuICAgIH0sIGtleSwgbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGNvbnRlbnQpKTtcbiAgICBjb25zdCBzaWduYXR1cmVEZXIgPSBjb252ZXJ0RWNkc2FJZWVlMTM2M1RvRGVyKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZUllZWUxMzYzKSk7XG4gICAgcmV0dXJuIHVpbnQ4QXJyYXlUb0hleFN0cmluZyhzaWduYXR1cmVEZXIpO1xufVxuLyoqXG4gKiBgU3VidGxlQ3J5cHRvLnNpZ24oLi4uKWAgb3V0cHV0cyBzaWduYXR1cmUgaW4gSUVFRSBQMTM2MyBmb3JtYXQ6XG4gKiAtIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TdWJ0bGVDcnlwdG8vc2lnbiNlY2RzYVxuICpcbiAqIFR1cm5rZXkgZXhwZWN0cyB0aGUgc2lnbmF0dXJlIGVuY29kaW5nIHRvIGJlIERFUi1lbmNvZGVkIEFTTi4xOlxuICogLSBodHRwczovL2dpdGh1Yi5jb20vdGtocS90a2NsaS9ibG9iLzdmMDE1OWFmNWE3MzM4N2ZmMDUwNjQ3MTgwZDFkYjRkM2EzYWEwMzMvc3JjL2ludGVybmFsL2FwaWtleS9hcGlrZXkuZ28jTDE0OVxuICpcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2VsbGlwdGljX2N1cnZlcy50cyNMMTE0XG4gKlxuICogVHJhbnNmb3JtIGFuIEVDRFNBIHNpZ25hdHVyZSBpbiBJRUVFIDEzNjMgZW5jb2RpbmcgdG8gREVSIGVuY29kaW5nLlxuICpcbiAqIEBwYXJhbSBpZWVlIHRoZSBFQ0RTQSBzaWduYXR1cmUgaW4gSUVFRSBlbmNvZGluZ1xuICogQHJldHVybiBFQ0RTQSBzaWduYXR1cmUgaW4gREVSIGVuY29kaW5nXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRFY2RzYUllZWUxMzYzVG9EZXIoaWVlZSkge1xuICAgIGlmIChpZWVlLmxlbmd0aCAlIDIgIT0gMCB8fCBpZWVlLmxlbmd0aCA9PSAwIHx8IGllZWUubGVuZ3RoID4gMTMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSUVFRSBQMTM2MyBzaWduYXR1cmUgZW5jb2RpbmcuIExlbmd0aDogXCIgKyBpZWVlLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IHIgPSB0b1Vuc2lnbmVkQmlnTnVtKGllZWUuc3ViYXJyYXkoMCwgaWVlZS5sZW5ndGggLyAyKSk7XG4gICAgY29uc3QgcyA9IHRvVW5zaWduZWRCaWdOdW0oaWVlZS5zdWJhcnJheShpZWVlLmxlbmd0aCAvIDIsIGllZWUubGVuZ3RoKSk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgY29uc3QgbGVuZ3RoID0gMSArIDEgKyByLmxlbmd0aCArIDEgKyAxICsgcy5sZW5ndGg7XG4gICAgbGV0IGRlcjtcbiAgICBpZiAobGVuZ3RoID49IDEyOCkge1xuICAgICAgICBkZXIgPSBuZXcgVWludDhBcnJheShsZW5ndGggKyAzKTtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDQ4O1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gMTI4ICsgMTtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IGxlbmd0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRlciA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCArIDIpO1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gNDg7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSBsZW5ndGg7XG4gICAgfVxuICAgIGRlcltvZmZzZXQrK10gPSAyO1xuICAgIGRlcltvZmZzZXQrK10gPSByLmxlbmd0aDtcbiAgICBkZXIuc2V0KHIsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHIubGVuZ3RoO1xuICAgIGRlcltvZmZzZXQrK10gPSAyO1xuICAgIGRlcltvZmZzZXQrK10gPSBzLmxlbmd0aDtcbiAgICBkZXIuc2V0KHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGRlcjtcbn1cbi8qKlxuICogQ29kZSBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvdGluay9ibG9iLzZmNzRiOTlhMmJmZTY2NzdlMzY3MDc5OTExNmE1NzI2OGZkMDY3ZmEvamF2YXNjcmlwdC9zdWJ0bGUvZWxsaXB0aWNfY3VydmVzLnRzI0wzMTFcbiAqXG4gKiBUcmFuc2Zvcm0gYSBiaWcgaW50ZWdlciBpbiBiaWcgZW5kaWFuIHRvIG1pbmltYWwgdW5zaWduZWQgZm9ybSB3aGljaCBoYXNcbiAqIG5vIGV4dHJhIHplcm8gYXQgdGhlIGJlZ2lubmluZyBleGNlcHQgd2hlbiB0aGUgaGlnaGVzdCBiaXQgaXMgc2V0LlxuICovXG5mdW5jdGlvbiB0b1Vuc2lnbmVkQmlnTnVtKGJ5dGVzKSB7XG4gICAgLy8gUmVtb3ZlIHplcm8gcHJlZml4ZXMuXG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICB3aGlsZSAoc3RhcnQgPCBieXRlcy5sZW5ndGggJiYgYnl0ZXNbc3RhcnRdID09IDApIHtcbiAgICAgICAgc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKHN0YXJ0ID09IGJ5dGVzLmxlbmd0aCkge1xuICAgICAgICBzdGFydCA9IGJ5dGVzLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIGxldCBleHRyYVplcm8gPSAwO1xuICAgIC8vIElmIHRoZSAxc3QgYml0IGlzIG5vdCB6ZXJvLCBhZGQgMSB6ZXJvIGJ5dGUuXG4gICAgaWYgKChieXRlc1tzdGFydF0gJiAxMjgpID09IDEyOCkge1xuICAgICAgICAvLyBBZGQgZXh0cmEgemVyby5cbiAgICAgICAgZXh0cmFaZXJvID0gMTtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMubGVuZ3RoIC0gc3RhcnQgKyBleHRyYVplcm8pO1xuICAgIHJlcy5zZXQoYnl0ZXMuc3ViYXJyYXkoc3RhcnQpLCBleHRyYVplcm8pO1xuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCB7IHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJjcnlwdG8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/encoding/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_JWK_MEMBER_BYTE_LENGTH: () => (/* binding */ DEFAULT_JWK_MEMBER_BYTE_LENGTH),\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   hexStringToBase64url: () => (/* binding */ hexStringToBase64url),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayFromHexString: () => (/* binding */ uint8ArrayFromHexString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nconst DEFAULT_JWK_MEMBER_BYTE_LENGTH = 32;\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction hexStringToBase64url(input, length) {\n    // Add an extra 0 to the start of the string to get a valid hex string (even length)\n    // (e.g. 0x0123 instead of 0x123)\n    const hexString = input.padStart(Math.ceil(input.length / 2) * 2, \"0\");\n    const buffer = uint8ArrayFromHexString(hexString, length);\n    return stringToBase64urlString(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\nconst uint8ArrayFromHexString = (hexString, length) => {\n    const hexRegex = /^[0-9A-Fa-f]+$/;\n    if (!hexString || hexString.length % 2 != 0 || !hexRegex.test(hexString)) {\n        throw new Error(`cannot create uint8array from invalid hex string: \"${hexString}\"`);\n    }\n    const buffer = new Uint8Array(hexString.match(/../g).map((h) => parseInt(h, 16)));\n    if (!length) {\n        return buffer;\n    }\n    if (hexString.length / 2 > length) {\n        throw new Error(\"hex value cannot fit in a buffer of \" + length + \" byte(s)\");\n    }\n    // If a length is specified, ensure we sufficiently pad\n    let paddedBuffer = new Uint8Array(length);\n    paddedBuffer.set(buffer, length - buffer.length);\n    return paddedBuffer;\n};\n// Pure JS implementation of btoa. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvZW5jb2RpbmcvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsVUFBVTtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQSx3RkFBd0YsaUJBQWlCLGNBQWMsRUFBRTtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRStLO0FBQy9LIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhY2hhXFxUZXN0XFxldGhnbFxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcZW5jb2RpbmdcXGRpc3RcXGluZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL3dlYmF1dGhuLWpzb24vYmxvYi9lOTMyYjM1ODVmYTcwYjBiZDViNWE0MDEyYmE3ZGJhZDdiMGEwZDBmL3NyYy93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC50cyNMMjNcbiAqL1xuY29uc3QgREVGQVVMVF9KV0tfTUVNQkVSX0JZVEVfTEVOR1RIID0gMzI7XG5mdW5jdGlvbiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhpbnB1dCkge1xuICAgIC8vIHN0cmluZyB0byBiYXNlNjQgLS0gd2UgZG8gbm90IHJlbHkgb24gdGhlIGJyb3dzZXIncyBidG9hIHNpbmNlIGl0J3Mgbm90IHByZXNlbnQgaW4gUmVhY3QgTmF0aXZlIGVudmlyb25tZW50c1xuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2EoaW5wdXQpO1xuICAgIHJldHVybiBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcoYmFzZTY0U3RyaW5nKTtcbn1cbmZ1bmN0aW9uIGhleFN0cmluZ1RvQmFzZTY0dXJsKGlucHV0LCBsZW5ndGgpIHtcbiAgICAvLyBBZGQgYW4gZXh0cmEgMCB0byB0aGUgc3RhcnQgb2YgdGhlIHN0cmluZyB0byBnZXQgYSB2YWxpZCBoZXggc3RyaW5nIChldmVuIGxlbmd0aClcbiAgICAvLyAoZS5nLiAweDAxMjMgaW5zdGVhZCBvZiAweDEyMylcbiAgICBjb25zdCBoZXhTdHJpbmcgPSBpbnB1dC5wYWRTdGFydChNYXRoLmNlaWwoaW5wdXQubGVuZ3RoIC8gMikgKiAyLCBcIjBcIik7XG4gICAgY29uc3QgYnVmZmVyID0gdWludDhBcnJheUZyb21IZXhTdHJpbmcoaGV4U3RyaW5nLCBsZW5ndGgpO1xuICAgIHJldHVybiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhidWZmZXIucmVkdWNlKChyZXN1bHQsIHgpID0+IHJlc3VsdCArIFN0cmluZy5mcm9tQ2hhckNvZGUoeCksIFwiXCIpKTtcbn1cbmZ1bmN0aW9uIGJhc2U2NFN0cmluZ1RvQmFzZTY0VXJsRW5jb2RlZFN0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikucmVwbGFjZSgvPS9nLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHVpbnQ4QXJyYXlUb0hleFN0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5yZWR1Y2UoKHJlc3VsdCwgeCkgPT4gcmVzdWx0ICsgeC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpLCBcIlwiKTtcbn1cbmNvbnN0IHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nID0gKGhleFN0cmluZywgbGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgaGV4UmVnZXggPSAvXlswLTlBLUZhLWZdKyQvO1xuICAgIGlmICghaGV4U3RyaW5nIHx8IGhleFN0cmluZy5sZW5ndGggJSAyICE9IDAgfHwgIWhleFJlZ2V4LnRlc3QoaGV4U3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBjcmVhdGUgdWludDhhcnJheSBmcm9tIGludmFsaWQgaGV4IHN0cmluZzogXCIke2hleFN0cmluZ31cImApO1xuICAgIH1cbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShoZXhTdHJpbmcubWF0Y2goLy4uL2cpLm1hcCgoaCkgPT4gcGFyc2VJbnQoaCwgMTYpKSk7XG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKGhleFN0cmluZy5sZW5ndGggLyAyID4gbGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImhleCB2YWx1ZSBjYW5ub3QgZml0IGluIGEgYnVmZmVyIG9mIFwiICsgbGVuZ3RoICsgXCIgYnl0ZShzKVwiKTtcbiAgICB9XG4gICAgLy8gSWYgYSBsZW5ndGggaXMgc3BlY2lmaWVkLCBlbnN1cmUgd2Ugc3VmZmljaWVudGx5IHBhZFxuICAgIGxldCBwYWRkZWRCdWZmZXIgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIHBhZGRlZEJ1ZmZlci5zZXQoYnVmZmVyLCBsZW5ndGggLSBidWZmZXIubGVuZ3RoKTtcbiAgICByZXR1cm4gcGFkZGVkQnVmZmVyO1xufTtcbi8vIFB1cmUgSlMgaW1wbGVtZW50YXRpb24gb2YgYnRvYS4gVGhpcyBpcyBhZGFwdGVkIGZyb20gdGhlIGZvbGxvd2luZzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9hYmFiL2Jsb2IvODA4NzRhZTFmZTFjZGUyZTU4N2JiNmU1MWI2ZDdjOWI0MmNhMWQzNC9saWIvYnRvYS5qc1xuZnVuY3Rpb24gYnRvYShzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIjEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgfVxuICAgIGxldCBpO1xuICAgIC8vIFN0cmluZyBjb252ZXJzaW9uIGFzIHJlcXVpcmVkIGJ5IFdlYiBJREwuXG4gICAgcyA9IGAke3N9YDtcbiAgICAvLyBcIlRoZSBidG9hKCkgbWV0aG9kIG11c3QgdGhyb3cgYW4gXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIiBET01FeGNlcHRpb24gaWZcbiAgICAvLyBkYXRhIGNvbnRhaW5zIGFueSBjaGFyYWN0ZXIgd2hvc2UgY29kZSBwb2ludCBpcyBncmVhdGVyIHRoYW4gVSswMEZGLlwiXG4gICAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHMuY2hhckNvZGVBdChpKSA+IDI1NSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkQ2hhcmFjdGVyRXJyb3I6IGZvdW5kIGNvZGUgcG9pbnQgZ3JlYXRlciB0aGFuIDI1NToke3MuY2hhckNvZGVBdChpKX0gYXQgcG9zaXRpb24gJHtpfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBvdXQgPSBcIlwiO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIGNvbnN0IGdyb3Vwc09mU2l4ID0gW1xuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBdO1xuICAgICAgICBncm91cHNPZlNpeFswXSA9IHMuY2hhckNvZGVBdChpKSA+PiAyO1xuICAgICAgICBncm91cHNPZlNpeFsxXSA9IChzLmNoYXJDb2RlQXQoaSkgJiAweDAzKSA8PCA0O1xuICAgICAgICBpZiAocy5sZW5ndGggPiBpICsgMSkge1xuICAgICAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gfD0gcy5jaGFyQ29kZUF0KGkgKyAxKSA+PiA0O1xuICAgICAgICAgICAgZ3JvdXBzT2ZTaXhbMl0gPSAocy5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4MGYpIDw8IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDIpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdIHw9IHMuY2hhckNvZGVBdChpICsgMikgPj4gNjtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzNdID0gcy5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4M2Y7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cHNPZlNpeC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBncm91cHNPZlNpeFtqXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIG91dCArPSBcIj1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSBidG9hTG9va3VwKGdyb3Vwc09mU2l4W2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gYnRvYUxvb2t1cChpbmRleCkge1xuICAgIC8qKlxuICAgICAqIExvb2t1cCB0YWJsZSBmb3IgYnRvYSgpLCB3aGljaCBjb252ZXJ0cyBhIHNpeC1iaXQgbnVtYmVyIGludG8gdGhlXG4gICAgICogY29ycmVzcG9uZGluZyBBU0NJSSBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgY29uc3Qga2V5c3RyID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCA2NCkge1xuICAgICAgICByZXR1cm4ga2V5c3RyW2luZGV4XTtcbiAgICB9XG4gICAgLy8gVGhyb3cgSU5WQUxJRF9DSEFSQUNURVJfRVJSIGV4Y2VwdGlvbiBoZXJlIC0tIHdvbid0IGJlIGhpdCBpbiB0aGUgdGVzdHMuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHsgREVGQVVMVF9KV0tfTUVNQkVSX0JZVEVfTEVOR1RILCBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcsIGhleFN0cmluZ1RvQmFzZTY0dXJsLCBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZywgdWludDhBcnJheUZyb21IZXhTdHJpbmcsIHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyClient: () => (/* binding */ TurnkeyClient)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../version.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/version.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../universal.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\");\n\n\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\nclass TurnkeyClient {\n    constructor(config, stamper) {\n        /**\n         * Get details about an Activity\n         *\n         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).\n         *\n         * See also {@link stampGetActivity}.\n         */\n        this.getActivity = async (input) => {\n            return this.request(\"/public/v1/query/get_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivity}.\n         */\n        this.stampGetActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an API key\n         *\n         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).\n         *\n         * See also {@link stampGetApiKey}.\n         */\n        this.getApiKey = async (input) => {\n            return this.request(\"/public/v1/query/get_api_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKey}.\n         */\n        this.stampGetApiKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about API keys for a user\n         *\n         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).\n         *\n         * See also {@link stampGetApiKeys}.\n         */\n        this.getApiKeys = async (input) => {\n            return this.request(\"/public/v1/query/get_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKeys}.\n         */\n        this.stampGetApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get the attestation document corresponding to an enclave.\n         *\n         * Sign the provided `TGetAttestationDocumentBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_attestation).\n         *\n         * See also {@link stampGetAttestationDocument}.\n         */\n        this.getAttestationDocument = async (input) => {\n            return this.request(\"/public/v1/query/get_attestation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAttestationDocumentBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAttestationDocument}.\n         */\n        this.stampGetAttestationDocument = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_attestation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an authenticator\n         *\n         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).\n         *\n         * See also {@link stampGetAuthenticator}.\n         */\n        this.getAuthenticator = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticator\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticator}.\n         */\n        this.stampGetAuthenticator = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticator\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about authenticators for a user\n         *\n         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).\n         *\n         * See also {@link stampGetAuthenticators}.\n         */\n        this.getAuthenticators = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticators}.\n         */\n        this.stampGetAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about Oauth providers for a user\n         *\n         * Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_oauth_providers).\n         *\n         * See also {@link stampGetOauthProviders}.\n         */\n        this.getOauthProviders = async (input) => {\n            return this.request(\"/public/v1/query/get_oauth_providers\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOauthProviders}.\n         */\n        this.stampGetOauthProviders = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_oauth_providers\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an Organization\n         *\n         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).\n         *\n         * See also {@link stampGetOrganization}.\n         */\n        this.getOrganization = async (input) => {\n            return this.request(\"/public/v1/query/get_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganization}.\n         */\n        this.stampGetOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get quorum settings and features for an organization\n         *\n         * Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization_configs).\n         *\n         * See also {@link stampGetOrganizationConfigs}.\n         */\n        this.getOrganizationConfigs = async (input) => {\n            return this.request(\"/public/v1/query/get_organization_configs\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganizationConfigs}.\n         */\n        this.stampGetOrganizationConfigs = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization_configs\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Policy\n         *\n         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).\n         *\n         * See also {@link stampGetPolicy}.\n         */\n        this.getPolicy = async (input) => {\n            return this.request(\"/public/v1/query/get_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicy}.\n         */\n        this.stampGetPolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Private Key\n         *\n         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).\n         *\n         * See also {@link stampGetPrivateKey}.\n         */\n        this.getPrivateKey = async (input) => {\n            return this.request(\"/public/v1/query/get_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKey}.\n         */\n        this.stampGetPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a User\n         *\n         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).\n         *\n         * See also {@link stampGetUser}.\n         */\n        this.getUser = async (input) => {\n            return this.request(\"/public/v1/query/get_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUser}.\n         */\n        this.stampGetUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Wallet\n         *\n         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).\n         *\n         * See also {@link stampGetWallet}.\n         */\n        this.getWallet = async (input) => {\n            return this.request(\"/public/v1/query/get_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallet}.\n         */\n        this.stampGetWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Activities within an Organization\n         *\n         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).\n         *\n         * See also {@link stampGetActivities}.\n         */\n        this.getActivities = async (input) => {\n            return this.request(\"/public/v1/query/list_activities\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivities}.\n         */\n        this.stampGetActivities = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_activities\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Policies within an Organization\n         *\n         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).\n         *\n         * See also {@link stampGetPolicies}.\n         */\n        this.getPolicies = async (input) => {\n            return this.request(\"/public/v1/query/list_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicies}.\n         */\n        this.stampGetPolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Key Tags within an Organization\n         *\n         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).\n         *\n         * See also {@link stampListPrivateKeyTags}.\n         */\n        this.listPrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/query/list_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListPrivateKeyTags}.\n         */\n        this.stampListPrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Keys within an Organization\n         *\n         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).\n         *\n         * See also {@link stampGetPrivateKeys}.\n         */\n        this.getPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/query/list_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKeys}.\n         */\n        this.stampGetPrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get all suborg IDs associated given a parent org ID and an optional filter.\n         *\n         * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).\n         *\n         * See also {@link stampGetSubOrgIds}.\n         */\n        this.getSubOrgIds = async (input) => {\n            return this.request(\"/public/v1/query/list_suborgs\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetSubOrgIds}.\n         */\n        this.stampGetSubOrgIds = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_suborgs\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all User Tags within an Organization\n         *\n         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).\n         *\n         * See also {@link stampListUserTags}.\n         */\n        this.listUserTags = async (input) => {\n            return this.request(\"/public/v1/query/list_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListUserTags}.\n         */\n        this.stampListUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Users within an Organization\n         *\n         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).\n         *\n         * See also {@link stampGetUsers}.\n         */\n        this.getUsers = async (input) => {\n            return this.request(\"/public/v1/query/list_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUsers}.\n         */\n        this.stampGetUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Accounts wirhin a Wallet\n         *\n         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).\n         *\n         * See also {@link stampGetWalletAccounts}.\n         */\n        this.getWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/query/list_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWalletAccounts}.\n         */\n        this.stampGetWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Wallets within an Organization\n         *\n         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).\n         *\n         * See also {@link stampGetWallets}.\n         */\n        this.getWallets = async (input) => {\n            return this.request(\"/public/v1/query/list_wallets\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallets}.\n         */\n        this.stampGetWallets = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallets\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n         *\n         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).\n         *\n         * See also {@link stampGetWhoami}.\n         */\n        this.getWhoami = async (input) => {\n            return this.request(\"/public/v1/query/whoami\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWhoami}.\n         */\n        this.stampGetWhoami = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/whoami\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Approve an Activity\n         *\n         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).\n         *\n         * See also {@link stampApproveActivity}.\n         */\n        this.approveActivity = async (input) => {\n            return this.request(\"/public/v1/submit/approve_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link ApproveActivity}.\n         */\n        this.stampApproveActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/approve_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Add api keys to an existing User\n         *\n         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).\n         *\n         * See also {@link stampCreateApiKeys}.\n         */\n        this.createApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiKeys}.\n         */\n        this.stampCreateApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create API-only Users in an existing Organization\n         *\n         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).\n         *\n         * See also {@link stampCreateApiOnlyUsers}.\n         */\n        this.createApiOnlyUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_only_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiOnlyUsers}.\n         */\n        this.stampCreateApiOnlyUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_only_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Authenticators to authenticate requests to Turnkey\n         *\n         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).\n         *\n         * See also {@link stampCreateAuthenticators}.\n         */\n        this.createAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/create_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateAuthenticators}.\n         */\n        this.stampCreateAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Invitations to join an existing Organization\n         *\n         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).\n         *\n         * See also {@link stampCreateInvitations}.\n         */\n        this.createInvitations = async (input) => {\n            return this.request(\"/public/v1/submit/create_invitations\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateInvitations}.\n         */\n        this.stampCreateInvitations = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_invitations\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Creates Oauth providers for a specified user - BETA\n         *\n         * Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_oauth_providers).\n         *\n         * See also {@link stampCreateOauthProviders}.\n         */\n        this.createOauthProviders = async (input) => {\n            return this.request(\"/public/v1/submit/create_oauth_providers\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateOauthProviders}.\n         */\n        this.stampCreateOauthProviders = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_oauth_providers\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Policies\n         *\n         * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).\n         *\n         * See also {@link stampCreatePolicies}.\n         */\n        this.createPolicies = async (input) => {\n            return this.request(\"/public/v1/submit/create_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicies}.\n         */\n        this.stampCreatePolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Policy\n         *\n         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).\n         *\n         * See also {@link stampCreatePolicy}.\n         */\n        this.createPolicy = async (input) => {\n            return this.request(\"/public/v1/submit/create_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicy}.\n         */\n        this.stampCreatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a private key tag and add it to private keys.\n         *\n         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).\n         *\n         * See also {@link stampCreatePrivateKeyTag}.\n         */\n        this.createPrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeyTag}.\n         */\n        this.stampCreatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Private Keys\n         *\n         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).\n         *\n         * See also {@link stampCreatePrivateKeys}.\n         */\n        this.createPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeys}.\n         */\n        this.stampCreatePrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a read only session for a user (valid for 1 hour)\n         *\n         * Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_only_session).\n         *\n         * See also {@link stampCreateReadOnlySession}.\n         */\n        this.createReadOnlySession = async (input) => {\n            return this.request(\"/public/v1/submit/create_read_only_session\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateReadOnlySession}.\n         */\n        this.stampCreateReadOnlySession = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_read_only_session\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a read write session for a user\n         *\n         * Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_write_session).\n         *\n         * See also {@link stampCreateReadWriteSession}.\n         */\n        this.createReadWriteSession = async (input) => {\n            return this.request(\"/public/v1/submit/create_read_write_session\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateReadWriteSession}.\n         */\n        this.stampCreateReadWriteSession = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_read_write_session\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Sub-Organization\n         *\n         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).\n         *\n         * See also {@link stampCreateSubOrganization}.\n         */\n        this.createSubOrganization = async (input) => {\n            return this.request(\"/public/v1/submit/create_sub_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateSubOrganization}.\n         */\n        this.stampCreateSubOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_sub_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a user tag and add it to users.\n         *\n         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).\n         *\n         * See also {@link stampCreateUserTag}.\n         */\n        this.createUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUserTag}.\n         */\n        this.stampCreateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Users in an existing Organization\n         *\n         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).\n         *\n         * See also {@link stampCreateUsers}.\n         */\n        this.createUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUsers}.\n         */\n        this.stampCreateUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a Wallet and derive addresses\n         *\n         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).\n         *\n         * See also {@link stampCreateWallet}.\n         */\n        this.createWallet = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWallet}.\n         */\n        this.stampCreateWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Derive additional addresses using an existing wallet\n         *\n         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).\n         *\n         * See also {@link stampCreateWalletAccounts}.\n         */\n        this.createWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWalletAccounts}.\n         */\n        this.stampCreateWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove api keys from a User\n         *\n         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).\n         *\n         * See also {@link stampDeleteApiKeys}.\n         */\n        this.deleteApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/delete_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteApiKeys}.\n         */\n        this.stampDeleteApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove authenticators from a User\n         *\n         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).\n         *\n         * See also {@link stampDeleteAuthenticators}.\n         */\n        this.deleteAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/delete_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteAuthenticators}.\n         */\n        this.stampDeleteAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Invitation\n         *\n         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).\n         *\n         * See also {@link stampDeleteInvitation}.\n         */\n        this.deleteInvitation = async (input) => {\n            return this.request(\"/public/v1/submit/delete_invitation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteInvitation}.\n         */\n        this.stampDeleteInvitation = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_invitation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes Oauth providers for a specified user - BETA\n         *\n         * Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_oauth_providers).\n         *\n         * See also {@link stampDeleteOauthProviders}.\n         */\n        this.deleteOauthProviders = async (input) => {\n            return this.request(\"/public/v1/submit/delete_oauth_providers\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteOauthProviders}.\n         */\n        this.stampDeleteOauthProviders = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_oauth_providers\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Policy\n         *\n         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).\n         *\n         * See also {@link stampDeletePolicy}.\n         */\n        this.deletePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/delete_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePolicy}.\n         */\n        this.stampDeletePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Private Key Tags within an Organization\n         *\n         * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).\n         *\n         * See also {@link stampDeletePrivateKeyTags}.\n         */\n        this.deletePrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePrivateKeyTags}.\n         */\n        this.stampDeletePrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete User Tags within an Organization\n         *\n         * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).\n         *\n         * See also {@link stampDeleteUserTags}.\n         */\n        this.deleteUserTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUserTags}.\n         */\n        this.stampDeleteUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Users within an Organization\n         *\n         * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).\n         *\n         * See also {@link stampDeleteUsers}.\n         */\n        this.deleteUsers = async (input) => {\n            return this.request(\"/public/v1/submit/delete_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUsers}.\n         */\n        this.stampDeleteUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user via Email\n         *\n         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).\n         *\n         * See also {@link stampEmailAuth}.\n         */\n        this.emailAuth = async (input) => {\n            return this.request(\"/public/v1/submit/email_auth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.\n         *\n         * See also {@link EmailAuth}.\n         */\n        this.stampEmailAuth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/email_auth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Private Key\n         *\n         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).\n         *\n         * See also {@link stampExportPrivateKey}.\n         */\n        this.exportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/export_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportPrivateKey}.\n         */\n        this.stampExportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet\n         *\n         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).\n         *\n         * See also {@link stampExportWallet}.\n         */\n        this.exportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWallet}.\n         */\n        this.stampExportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet Account\n         *\n         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).\n         *\n         * See also {@link stampExportWalletAccount}.\n         */\n        this.exportWalletAccount = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet_account\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWalletAccount}.\n         */\n        this.stampExportWalletAccount = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet_account\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a private key\n         *\n         * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).\n         *\n         * See also {@link stampImportPrivateKey}.\n         */\n        this.importPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportPrivateKey}.\n         */\n        this.stampImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a wallet\n         *\n         * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).\n         *\n         * See also {@link stampImportWallet}.\n         */\n        this.importWallet = async (input) => {\n            return this.request(\"/public/v1/submit/import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportWallet}.\n         */\n        this.stampImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new private key import\n         *\n         * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).\n         *\n         * See also {@link stampInitImportPrivateKey}.\n         */\n        this.initImportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportPrivateKey}.\n         */\n        this.stampInitImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new wallet import\n         *\n         * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).\n         *\n         * See also {@link stampInitImportWallet}.\n         */\n        this.initImportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportWallet}.\n         */\n        this.stampInitImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new email recovery\n         *\n         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).\n         *\n         * See also {@link stampInitUserEmailRecovery}.\n         */\n        this.initUserEmailRecovery = async (input) => {\n            return this.request(\"/public/v1/submit/init_user_email_recovery\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitUserEmailRecovery}.\n         */\n        this.stampInitUserEmailRecovery = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_user_email_recovery\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user with an Oidc token (Oauth) - BETA\n         *\n         * Sign the provided `TOauthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth).\n         *\n         * See also {@link stampOauth}.\n         */\n        this.oauth = async (input) => {\n            return this.request(\"/public/v1/submit/oauth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.\n         *\n         * See also {@link Oauth}.\n         */\n        this.stampOauth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/oauth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Completes the process of recovering a user by adding an authenticator\n         *\n         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).\n         *\n         * See also {@link stampRecoverUser}.\n         */\n        this.recoverUser = async (input) => {\n            return this.request(\"/public/v1/submit/recover_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link RecoverUser}.\n         */\n        this.stampRecoverUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/recover_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Reject an Activity\n         *\n         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).\n         *\n         * See also {@link stampRejectActivity}.\n         */\n        this.rejectActivity = async (input) => {\n            return this.request(\"/public/v1/submit/reject_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link RejectActivity}.\n         */\n        this.stampRejectActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/reject_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes an organization feature\n         *\n         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).\n         *\n         * See also {@link stampRemoveOrganizationFeature}.\n         */\n        this.removeOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/remove_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link RemoveOrganizationFeature}.\n         */\n        this.stampRemoveOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/remove_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sets an organization feature\n         *\n         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).\n         *\n         * See also {@link stampSetOrganizationFeature}.\n         */\n        this.setOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/set_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link SetOrganizationFeature}.\n         */\n        this.stampSetOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/set_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a raw payload\n         *\n         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).\n         *\n         * See also {@link stampSignRawPayload}.\n         */\n        this.signRawPayload = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payload\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayload}.\n         */\n        this.stampSignRawPayload = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payload\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign multiple raw payloads with the same signing parameters\n         *\n         * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).\n         *\n         * See also {@link stampSignRawPayloads}.\n         */\n        this.signRawPayloads = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payloads\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayloads}.\n         */\n        this.stampSignRawPayloads = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payloads\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a transaction\n         *\n         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).\n         *\n         * See also {@link stampSignTransaction}.\n         */\n        this.signTransaction = async (input) => {\n            return this.request(\"/public/v1/submit/sign_transaction\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignTransaction}.\n         */\n        this.stampSignTransaction = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_transaction\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update an existing Policy\n         *\n         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).\n         *\n         * See also {@link stampUpdatePolicy}.\n         */\n        this.updatePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/update_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePolicy}.\n         */\n        this.stampUpdatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).\n         *\n         * See also {@link stampUpdatePrivateKeyTag}.\n         */\n        this.updatePrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePrivateKeyTag}.\n         */\n        this.stampUpdatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n         *\n         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).\n         *\n         * See also {@link stampUpdateRootQuorum}.\n         */\n        this.updateRootQuorum = async (input) => {\n            return this.request(\"/public/v1/submit/update_root_quorum\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateRootQuorum}.\n         */\n        this.stampUpdateRootQuorum = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_root_quorum\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update a User in an existing Organization\n         *\n         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).\n         *\n         * See also {@link stampUpdateUser}.\n         */\n        this.updateUser = async (input) => {\n            return this.request(\"/public/v1/submit/update_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUser}.\n         */\n        this.stampUpdateUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).\n         *\n         * See also {@link stampUpdateUserTag}.\n         */\n        this.updateUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUserTag}.\n         */\n        this.stampUpdateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        if (!config.baseUrl) {\n            throw new Error(`Missing base URL. Please verify env vars.`);\n        }\n        this.config = config;\n        this.stamper = stamper;\n    }\n    async request(url, body) {\n        const fullUrl = this.config.baseUrl + url;\n        const stringifiedBody = JSON.stringify(body);\n        const stamp = await this.stamper.stamp(stringifiedBody);\n        const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_2__.fetch)(fullUrl, {\n            method: \"POST\",\n            headers: {\n                [stamp.stampHeaderName]: stamp.stampHeaderValue,\n                \"X-Client-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n            },\n            body: stringifiedBody,\n            redirect: \"follow\",\n        });\n        if (!response.ok) {\n            let res;\n            try {\n                res = await response.json();\n            }\n            catch (_) {\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            throw new _base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError(res);\n        }\n        const data = await response.json();\n        return data;\n    }\n}\n\n\n//# sourceMappingURL=public_api.client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approveActivity: () => (/* binding */ approveActivity),\n/* harmony export */   createApiKeys: () => (/* binding */ createApiKeys),\n/* harmony export */   createApiOnlyUsers: () => (/* binding */ createApiOnlyUsers),\n/* harmony export */   createAuthenticators: () => (/* binding */ createAuthenticators),\n/* harmony export */   createInvitations: () => (/* binding */ createInvitations),\n/* harmony export */   createOauthProviders: () => (/* binding */ createOauthProviders),\n/* harmony export */   createPolicies: () => (/* binding */ createPolicies),\n/* harmony export */   createPolicy: () => (/* binding */ createPolicy),\n/* harmony export */   createPrivateKeyTag: () => (/* binding */ createPrivateKeyTag),\n/* harmony export */   createPrivateKeys: () => (/* binding */ createPrivateKeys),\n/* harmony export */   createReadOnlySession: () => (/* binding */ createReadOnlySession),\n/* harmony export */   createReadWriteSession: () => (/* binding */ createReadWriteSession),\n/* harmony export */   createSubOrganization: () => (/* binding */ createSubOrganization),\n/* harmony export */   createUserTag: () => (/* binding */ createUserTag),\n/* harmony export */   createUsers: () => (/* binding */ createUsers),\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   createWalletAccounts: () => (/* binding */ createWalletAccounts),\n/* harmony export */   deleteApiKeys: () => (/* binding */ deleteApiKeys),\n/* harmony export */   deleteAuthenticators: () => (/* binding */ deleteAuthenticators),\n/* harmony export */   deleteInvitation: () => (/* binding */ deleteInvitation),\n/* harmony export */   deleteOauthProviders: () => (/* binding */ deleteOauthProviders),\n/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),\n/* harmony export */   deletePrivateKeyTags: () => (/* binding */ deletePrivateKeyTags),\n/* harmony export */   deleteUserTags: () => (/* binding */ deleteUserTags),\n/* harmony export */   deleteUsers: () => (/* binding */ deleteUsers),\n/* harmony export */   emailAuth: () => (/* binding */ emailAuth),\n/* harmony export */   exportPrivateKey: () => (/* binding */ exportPrivateKey),\n/* harmony export */   exportWallet: () => (/* binding */ exportWallet),\n/* harmony export */   exportWalletAccount: () => (/* binding */ exportWalletAccount),\n/* harmony export */   getActivities: () => (/* binding */ getActivities),\n/* harmony export */   getActivity: () => (/* binding */ getActivity),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getApiKeys: () => (/* binding */ getApiKeys),\n/* harmony export */   getAttestationDocument: () => (/* binding */ getAttestationDocument),\n/* harmony export */   getAuthenticator: () => (/* binding */ getAuthenticator),\n/* harmony export */   getAuthenticators: () => (/* binding */ getAuthenticators),\n/* harmony export */   getOauthProviders: () => (/* binding */ getOauthProviders),\n/* harmony export */   getOrganization: () => (/* binding */ getOrganization),\n/* harmony export */   getOrganizationConfigs: () => (/* binding */ getOrganizationConfigs),\n/* harmony export */   getPolicies: () => (/* binding */ getPolicies),\n/* harmony export */   getPolicy: () => (/* binding */ getPolicy),\n/* harmony export */   getPrivateKey: () => (/* binding */ getPrivateKey),\n/* harmony export */   getPrivateKeys: () => (/* binding */ getPrivateKeys),\n/* harmony export */   getSubOrgIds: () => (/* binding */ getSubOrgIds),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   getWallet: () => (/* binding */ getWallet),\n/* harmony export */   getWalletAccounts: () => (/* binding */ getWalletAccounts),\n/* harmony export */   getWallets: () => (/* binding */ getWallets),\n/* harmony export */   getWhoami: () => (/* binding */ getWhoami),\n/* harmony export */   importPrivateKey: () => (/* binding */ importPrivateKey),\n/* harmony export */   importWallet: () => (/* binding */ importWallet),\n/* harmony export */   initImportPrivateKey: () => (/* binding */ initImportPrivateKey),\n/* harmony export */   initImportWallet: () => (/* binding */ initImportWallet),\n/* harmony export */   initUserEmailRecovery: () => (/* binding */ initUserEmailRecovery),\n/* harmony export */   listPrivateKeyTags: () => (/* binding */ listPrivateKeyTags),\n/* harmony export */   listUserTags: () => (/* binding */ listUserTags),\n/* harmony export */   nOOPCodegenAnchor: () => (/* binding */ nOOPCodegenAnchor),\n/* harmony export */   oauth: () => (/* binding */ oauth),\n/* harmony export */   recoverUser: () => (/* binding */ recoverUser),\n/* harmony export */   rejectActivity: () => (/* binding */ rejectActivity),\n/* harmony export */   removeOrganizationFeature: () => (/* binding */ removeOrganizationFeature),\n/* harmony export */   setOrganizationFeature: () => (/* binding */ setOrganizationFeature),\n/* harmony export */   signApproveActivity: () => (/* binding */ signApproveActivity),\n/* harmony export */   signCreateApiKeys: () => (/* binding */ signCreateApiKeys),\n/* harmony export */   signCreateApiOnlyUsers: () => (/* binding */ signCreateApiOnlyUsers),\n/* harmony export */   signCreateAuthenticators: () => (/* binding */ signCreateAuthenticators),\n/* harmony export */   signCreateInvitations: () => (/* binding */ signCreateInvitations),\n/* harmony export */   signCreateOauthProviders: () => (/* binding */ signCreateOauthProviders),\n/* harmony export */   signCreatePolicies: () => (/* binding */ signCreatePolicies),\n/* harmony export */   signCreatePolicy: () => (/* binding */ signCreatePolicy),\n/* harmony export */   signCreatePrivateKeyTag: () => (/* binding */ signCreatePrivateKeyTag),\n/* harmony export */   signCreatePrivateKeys: () => (/* binding */ signCreatePrivateKeys),\n/* harmony export */   signCreateReadOnlySession: () => (/* binding */ signCreateReadOnlySession),\n/* harmony export */   signCreateReadWriteSession: () => (/* binding */ signCreateReadWriteSession),\n/* harmony export */   signCreateSubOrganization: () => (/* binding */ signCreateSubOrganization),\n/* harmony export */   signCreateUserTag: () => (/* binding */ signCreateUserTag),\n/* harmony export */   signCreateUsers: () => (/* binding */ signCreateUsers),\n/* harmony export */   signCreateWallet: () => (/* binding */ signCreateWallet),\n/* harmony export */   signCreateWalletAccounts: () => (/* binding */ signCreateWalletAccounts),\n/* harmony export */   signDeleteApiKeys: () => (/* binding */ signDeleteApiKeys),\n/* harmony export */   signDeleteAuthenticators: () => (/* binding */ signDeleteAuthenticators),\n/* harmony export */   signDeleteInvitation: () => (/* binding */ signDeleteInvitation),\n/* harmony export */   signDeleteOauthProviders: () => (/* binding */ signDeleteOauthProviders),\n/* harmony export */   signDeletePolicy: () => (/* binding */ signDeletePolicy),\n/* harmony export */   signDeletePrivateKeyTags: () => (/* binding */ signDeletePrivateKeyTags),\n/* harmony export */   signDeleteUserTags: () => (/* binding */ signDeleteUserTags),\n/* harmony export */   signDeleteUsers: () => (/* binding */ signDeleteUsers),\n/* harmony export */   signEmailAuth: () => (/* binding */ signEmailAuth),\n/* harmony export */   signExportPrivateKey: () => (/* binding */ signExportPrivateKey),\n/* harmony export */   signExportWallet: () => (/* binding */ signExportWallet),\n/* harmony export */   signExportWalletAccount: () => (/* binding */ signExportWalletAccount),\n/* harmony export */   signGetActivities: () => (/* binding */ signGetActivities),\n/* harmony export */   signGetActivity: () => (/* binding */ signGetActivity),\n/* harmony export */   signGetApiKey: () => (/* binding */ signGetApiKey),\n/* harmony export */   signGetApiKeys: () => (/* binding */ signGetApiKeys),\n/* harmony export */   signGetAttestationDocument: () => (/* binding */ signGetAttestationDocument),\n/* harmony export */   signGetAuthenticator: () => (/* binding */ signGetAuthenticator),\n/* harmony export */   signGetAuthenticators: () => (/* binding */ signGetAuthenticators),\n/* harmony export */   signGetOauthProviders: () => (/* binding */ signGetOauthProviders),\n/* harmony export */   signGetOrganization: () => (/* binding */ signGetOrganization),\n/* harmony export */   signGetOrganizationConfigs: () => (/* binding */ signGetOrganizationConfigs),\n/* harmony export */   signGetPolicies: () => (/* binding */ signGetPolicies),\n/* harmony export */   signGetPolicy: () => (/* binding */ signGetPolicy),\n/* harmony export */   signGetPrivateKey: () => (/* binding */ signGetPrivateKey),\n/* harmony export */   signGetPrivateKeys: () => (/* binding */ signGetPrivateKeys),\n/* harmony export */   signGetSubOrgIds: () => (/* binding */ signGetSubOrgIds),\n/* harmony export */   signGetUser: () => (/* binding */ signGetUser),\n/* harmony export */   signGetUsers: () => (/* binding */ signGetUsers),\n/* harmony export */   signGetWallet: () => (/* binding */ signGetWallet),\n/* harmony export */   signGetWalletAccounts: () => (/* binding */ signGetWalletAccounts),\n/* harmony export */   signGetWallets: () => (/* binding */ signGetWallets),\n/* harmony export */   signGetWhoami: () => (/* binding */ signGetWhoami),\n/* harmony export */   signImportPrivateKey: () => (/* binding */ signImportPrivateKey),\n/* harmony export */   signImportWallet: () => (/* binding */ signImportWallet),\n/* harmony export */   signInitImportPrivateKey: () => (/* binding */ signInitImportPrivateKey),\n/* harmony export */   signInitImportWallet: () => (/* binding */ signInitImportWallet),\n/* harmony export */   signInitUserEmailRecovery: () => (/* binding */ signInitUserEmailRecovery),\n/* harmony export */   signListPrivateKeyTags: () => (/* binding */ signListPrivateKeyTags),\n/* harmony export */   signListUserTags: () => (/* binding */ signListUserTags),\n/* harmony export */   signNOOPCodegenAnchor: () => (/* binding */ signNOOPCodegenAnchor),\n/* harmony export */   signOauth: () => (/* binding */ signOauth),\n/* harmony export */   signRawPayload: () => (/* binding */ signRawPayload),\n/* harmony export */   signRawPayloads: () => (/* binding */ signRawPayloads),\n/* harmony export */   signRecoverUser: () => (/* binding */ signRecoverUser),\n/* harmony export */   signRejectActivity: () => (/* binding */ signRejectActivity),\n/* harmony export */   signRemoveOrganizationFeature: () => (/* binding */ signRemoveOrganizationFeature),\n/* harmony export */   signSetOrganizationFeature: () => (/* binding */ signSetOrganizationFeature),\n/* harmony export */   signSignRawPayload: () => (/* binding */ signSignRawPayload),\n/* harmony export */   signSignRawPayloads: () => (/* binding */ signSignRawPayloads),\n/* harmony export */   signSignTransaction: () => (/* binding */ signSignTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signUpdatePolicy: () => (/* binding */ signUpdatePolicy),\n/* harmony export */   signUpdatePrivateKeyTag: () => (/* binding */ signUpdatePrivateKeyTag),\n/* harmony export */   signUpdateRootQuorum: () => (/* binding */ signUpdateRootQuorum),\n/* harmony export */   signUpdateUser: () => (/* binding */ signUpdateUser),\n/* harmony export */   signUpdateUserTag: () => (/* binding */ signUpdateUserTag),\n/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy),\n/* harmony export */   updatePrivateKeyTag: () => (/* binding */ updatePrivateKeyTag),\n/* harmony export */   updateRootQuorum: () => (/* binding */ updateRootQuorum),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateUserTag: () => (/* binding */ updateUserTag)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\n/**\n * Get Activity\n *\n * Get details about an Activity\n *\n * `POST /public/v1/query/get_activity`\n */\nconst getActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivity}\n */\nconst signGetActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about an API key\n *\n * `POST /public/v1/query/get_api_key`\n */\nconst getApiKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKey}\n */\nconst signGetApiKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about API keys for a user\n *\n * `POST /public/v1/query/get_api_keys`\n */\nconst getApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKeys}\n */\nconst signGetApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Attestation\n *\n * Get the attestation document corresponding to an enclave.\n *\n * `POST /public/v1/query/get_attestation`\n */\nconst getAttestationDocument = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_attestation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAttestationDocument` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAttestationDocument}\n */\nconst signGetAttestationDocument = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_attestation\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticator\n *\n * Get details about an authenticator\n *\n * `POST /public/v1/query/get_authenticator`\n */\nconst getAuthenticator = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticator\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticator}\n */\nconst signGetAuthenticator = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticator\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticators\n *\n * Get details about authenticators for a user\n *\n * `POST /public/v1/query/get_authenticators`\n */\nconst getAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticators}\n */\nconst signGetAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Get Oauth providers\n *\n * Get details about Oauth providers for a user\n *\n * `POST /public/v1/query/get_oauth_providers`\n */\nconst getOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_oauth_providers\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOauthProviders` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOauthProviders}\n */\nconst signGetOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_oauth_providers\",\n    body: input.body,\n    options,\n});\n/**\n * Get Organization\n *\n * Get details about an Organization\n *\n * `POST /public/v1/query/get_organization`\n */\nconst getOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganization}\n */\nconst signGetOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Get Configs\n *\n * Get quorum settings and features for an organization\n *\n * `POST /public/v1/query/get_organization_configs`\n */\nconst getOrganizationConfigs = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization_configs\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganizationConfigs` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganizationConfigs}\n */\nconst signGetOrganizationConfigs = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization_configs\",\n    body: input.body,\n    options,\n});\n/**\n * Get Policy\n *\n * Get details about a Policy\n *\n * `POST /public/v1/query/get_policy`\n */\nconst getPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicy}\n */\nconst signGetPolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Get Private Key\n *\n * Get details about a Private Key\n *\n * `POST /public/v1/query/get_private_key`\n */\nconst getPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKey}\n */\nconst signGetPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get User\n *\n * Get details about a User\n *\n * `POST /public/v1/query/get_user`\n */\nconst getUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUser}\n */\nconst signGetUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_user\",\n    body: input.body,\n    options,\n});\n/**\n * Get Wallet\n *\n * Get details about a Wallet\n *\n * `POST /public/v1/query/get_wallet`\n */\nconst getWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallet}\n */\nconst signGetWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * List Activities\n *\n * List all Activities within an Organization\n *\n * `POST /public/v1/query/list_activities`\n */\nconst getActivities = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_activities\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivities}\n */\nconst signGetActivities = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_activities\",\n    body: input.body,\n    options,\n});\n/**\n * List Policies\n *\n * List all Policies within an Organization\n *\n * `POST /public/v1/query/list_policies`\n */\nconst getPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicies}\n */\nconst signGetPolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_policies\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Key Tags\n *\n * List all Private Key Tags within an Organization\n *\n * `POST /public/v1/query/list_private_key_tags`\n */\nconst listPrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListPrivateKeyTags}\n */\nconst signListPrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Keys\n *\n * List all Private Keys within an Organization\n *\n * `POST /public/v1/query/list_private_keys`\n */\nconst getPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKeys}\n */\nconst signGetPrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Suborgs\n *\n * Get all suborg IDs associated given a parent org ID and an optional filter.\n *\n * `POST /public/v1/query/list_suborgs`\n */\nconst getSubOrgIds = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_suborgs\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetSubOrgIds}\n */\nconst signGetSubOrgIds = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_suborgs\",\n    body: input.body,\n    options,\n});\n/**\n * List User Tags\n *\n * List all User Tags within an Organization\n *\n * `POST /public/v1/query/list_user_tags`\n */\nconst listUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListUserTags}\n */\nconst signListUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Users\n *\n * List all Users within an Organization\n *\n * `POST /public/v1/query/list_users`\n */\nconst getUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUsers}\n */\nconst signGetUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_users\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets Accounts\n *\n * List all Accounts wirhin a Wallet\n *\n * `POST /public/v1/query/list_wallet_accounts`\n */\nconst getWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWalletAccounts}\n */\nconst signGetWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets\n *\n * List all Wallets within an Organization\n *\n * `POST /public/v1/query/list_wallets`\n */\nconst getWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallets\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallets}\n */\nconst signGetWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallets\",\n    body: input.body,\n    options,\n});\n/**\n * Who am I?\n *\n * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n *\n * `POST /public/v1/query/whoami`\n */\nconst getWhoami = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/whoami\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWhoami}\n */\nconst signGetWhoami = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/whoami\",\n    body: input.body,\n    options,\n});\n/**\n * Approve Activity\n *\n * Approve an Activity\n *\n * `POST /public/v1/submit/approve_activity`\n */\nconst approveActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/approve_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link ApproveActivity}\n */\nconst signApproveActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/approve_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Create API Keys\n *\n * Add api keys to an existing User\n *\n * `POST /public/v1/submit/create_api_keys`\n */\nconst createApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiKeys}\n */\nconst signCreateApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create API-only Users\n *\n * Create API-only Users in an existing Organization\n *\n * `POST /public/v1/submit/create_api_only_users`\n */\nconst createApiOnlyUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiOnlyUsers}\n */\nconst signCreateApiOnlyUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Authenticators\n *\n * Create Authenticators to authenticate requests to Turnkey\n *\n * `POST /public/v1/submit/create_authenticators`\n */\nconst createAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateAuthenticators}\n */\nconst signCreateAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Create Invitations\n *\n * Create Invitations to join an existing Organization\n *\n * `POST /public/v1/submit/create_invitations`\n */\nconst createInvitations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_invitations\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateInvitations}\n */\nconst signCreateInvitations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_invitations\",\n    body: input.body,\n    options,\n});\n/**\n * Create Oauth Providers\n *\n * Creates Oauth providers for a specified user - BETA\n *\n * `POST /public/v1/submit/create_oauth_providers`\n */\nconst createOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_oauth_providers\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateOauthProviders` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateOauthProviders}\n */\nconst signCreateOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_oauth_providers\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policies\n *\n * Create new Policies\n *\n * `POST /public/v1/submit/create_policies`\n */\nconst createPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicies}\n */\nconst signCreatePolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policies\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policy\n *\n * Create a new Policy\n *\n * `POST /public/v1/submit/create_policy`\n */\nconst createPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicy}\n */\nconst signCreatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Key Tag\n *\n * Create a private key tag and add it to private keys.\n *\n * `POST /public/v1/submit/create_private_key_tag`\n */\nconst createPrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeyTag}\n */\nconst signCreatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Keys\n *\n * Create new Private Keys\n *\n * `POST /public/v1/submit/create_private_keys`\n */\nconst createPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeys}\n */\nconst signCreatePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create Read Only Session\n *\n * Create a read only session for a user (valid for 1 hour)\n *\n * `POST /public/v1/submit/create_read_only_session`\n */\nconst createReadOnlySession = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_read_only_session\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateReadOnlySession` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateReadOnlySession}\n */\nconst signCreateReadOnlySession = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_read_only_session\",\n    body: input.body,\n    options,\n});\n/**\n * Create Read Write Session\n *\n * Create a read write session for a user\n *\n * `POST /public/v1/submit/create_read_write_session`\n */\nconst createReadWriteSession = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_read_write_session\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateReadWriteSession` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateReadWriteSession}\n */\nconst signCreateReadWriteSession = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_read_write_session\",\n    body: input.body,\n    options,\n});\n/**\n * Create Sub-Organization\n *\n * Create a new Sub-Organization\n *\n * `POST /public/v1/submit/create_sub_organization`\n */\nconst createSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateSubOrganization}\n */\nconst signCreateSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Create User Tag\n *\n * Create a user tag and add it to users.\n *\n * `POST /public/v1/submit/create_user_tag`\n */\nconst createUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUserTag}\n */\nconst signCreateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Users\n *\n * Create Users in an existing Organization\n *\n * `POST /public/v1/submit/create_users`\n */\nconst createUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUsers}\n */\nconst signCreateUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet\n *\n * Create a Wallet and derive addresses\n *\n * `POST /public/v1/submit/create_wallet`\n */\nconst createWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWallet}\n */\nconst signCreateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet Accounts\n *\n * Derive additional addresses using an existing wallet\n *\n * `POST /public/v1/submit/create_wallet_accounts`\n */\nconst createWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWalletAccounts}\n */\nconst signCreateWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * Delete API Keys\n *\n * Remove api keys from a User\n *\n * `POST /public/v1/submit/delete_api_keys`\n */\nconst deleteApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteApiKeys}\n */\nconst signDeleteApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Authenticators\n *\n * Remove authenticators from a User\n *\n * `POST /public/v1/submit/delete_authenticators`\n */\nconst deleteAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteAuthenticators}\n */\nconst signDeleteAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Invitation\n *\n * Delete an existing Invitation\n *\n * `POST /public/v1/submit/delete_invitation`\n */\nconst deleteInvitation = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteInvitation}\n */\nconst signDeleteInvitation = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Oauth Providers\n *\n * Removes Oauth providers for a specified user - BETA\n *\n * `POST /public/v1/submit/delete_oauth_providers`\n */\nconst deleteOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_oauth_providers\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteOauthProviders` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteOauthProviders}\n */\nconst signDeleteOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_oauth_providers\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Policy\n *\n * Delete an existing Policy\n *\n * `POST /public/v1/submit/delete_policy`\n */\nconst deletePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePolicy}\n */\nconst signDeletePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Private Key Tags\n *\n * Delete Private Key Tags within an Organization\n *\n * `POST /public/v1/submit/delete_private_key_tags`\n */\nconst deletePrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePrivateKeyTags}\n */\nconst signDeletePrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete User Tags\n *\n * Delete User Tags within an Organization\n *\n * `POST /public/v1/submit/delete_user_tags`\n */\nconst deleteUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUserTags}\n */\nconst signDeleteUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Users\n *\n * Delete Users within an Organization\n *\n * `POST /public/v1/submit/delete_users`\n */\nconst deleteUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUsers}\n */\nconst signDeleteUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_users\",\n    body: input.body,\n    options,\n});\n/**\n * Perform Email Auth\n *\n * Authenticate a user via Email\n *\n * `POST /public/v1/submit/email_auth`\n */\nconst emailAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/email_auth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.\n *\n * See {@link EmailAuth}\n */\nconst signEmailAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/email_auth\",\n    body: input.body,\n    options,\n});\n/**\n * Export Private Key\n *\n * Exports a Private Key\n *\n * `POST /public/v1/submit/export_private_key`\n */\nconst exportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportPrivateKey}\n */\nconst signExportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet\n *\n * Exports a Wallet\n *\n * `POST /public/v1/submit/export_wallet`\n */\nconst exportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWallet}\n */\nconst signExportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet Account\n *\n * Exports a Wallet Account\n *\n * `POST /public/v1/submit/export_wallet_account`\n */\nconst exportWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWalletAccount}\n */\nconst signExportWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    body: input.body,\n    options,\n});\n/**\n * Import Private Key\n *\n * Imports a private key\n *\n * `POST /public/v1/submit/import_private_key`\n */\nconst importPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportPrivateKey}\n */\nconst signImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Import Wallet\n *\n * Imports a wallet\n *\n * `POST /public/v1/submit/import_wallet`\n */\nconst importWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportWallet}\n */\nconst signImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Private Key\n *\n * Initializes a new private key import\n *\n * `POST /public/v1/submit/init_import_private_key`\n */\nconst initImportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportPrivateKey}\n */\nconst signInitImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Wallet\n *\n * Initializes a new wallet import\n *\n * `POST /public/v1/submit/init_import_wallet`\n */\nconst initImportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportWallet}\n */\nconst signInitImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Email Recovery\n *\n * Initializes a new email recovery\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\nconst initUserEmailRecovery = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitUserEmailRecovery}\n */\nconst signInitUserEmailRecovery = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    body: input.body,\n    options,\n});\n/**\n * Oauth\n *\n * Authenticate a user with an Oidc token (Oauth) - BETA\n *\n * `POST /public/v1/submit/oauth`\n */\nconst oauth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/oauth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `Oauth` request, ready to be POSTed to Turnkey.\n *\n * See {@link Oauth}\n */\nconst signOauth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/oauth\",\n    body: input.body,\n    options,\n});\n/**\n * Recover a user\n *\n * Completes the process of recovering a user by adding an authenticator\n *\n * `POST /public/v1/submit/recover_user`\n */\nconst recoverUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/recover_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link RecoverUser}\n */\nconst signRecoverUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/recover_user\",\n    body: input.body,\n    options,\n});\n/**\n * Reject Activity\n *\n * Reject an Activity\n *\n * `POST /public/v1/submit/reject_activity`\n */\nconst rejectActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/reject_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link RejectActivity}\n */\nconst signRejectActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/reject_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Remove Organization Feature\n *\n * Removes an organization feature\n *\n * `POST /public/v1/submit/remove_organization_feature`\n */\nconst removeOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link RemoveOrganizationFeature}\n */\nconst signRemoveOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Set Organization Feature\n *\n * Sets an organization feature\n *\n * `POST /public/v1/submit/set_organization_feature`\n */\nconst setOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link SetOrganizationFeature}\n */\nconst signSetOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payload\n *\n * Sign a raw payload\n *\n * `POST /public/v1/submit/sign_raw_payload`\n */\nconst signRawPayload = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayload}\n */\nconst signSignRawPayload = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payloads\n *\n * Sign multiple raw payloads with the same signing parameters\n *\n * `POST /public/v1/submit/sign_raw_payloads`\n */\nconst signRawPayloads = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayloads}\n */\nconst signSignRawPayloads = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Transaction\n *\n * Sign a transaction\n *\n * `POST /public/v1/submit/sign_transaction`\n */\nconst signTransaction = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignTransaction}\n */\nconst signSignTransaction = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    body: input.body,\n    options,\n});\n/**\n * Update Policy\n *\n * Update an existing Policy\n *\n * `POST /public/v1/submit/update_policy`\n */\nconst updatePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePolicy}\n */\nconst signUpdatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Update Private Key Tag\n *\n * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_private_key_tag`\n */\nconst updatePrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePrivateKeyTag}\n */\nconst signUpdatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Update Root Quorum\n *\n * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n *\n * `POST /public/v1/submit/update_root_quorum`\n */\nconst updateRootQuorum = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateRootQuorum}\n */\nconst signUpdateRootQuorum = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    body: input.body,\n    options,\n});\n/**\n * Update User\n *\n * Update a User in an existing Organization\n *\n * `POST /public/v1/submit/update_user`\n */\nconst updateUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUser}\n */\nconst signUpdateUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user\",\n    body: input.body,\n    options,\n});\n/**\n * Update User Tag\n *\n * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_user_tag`\n */\nconst updateUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUserTag}\n */\nconst signUpdateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * `POST /tkhq/api/v1/noop-codegen-anchor`\n */\nconst nOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n    method: \"POST\",\n});\n/**\n * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.\n *\n * See {@link NOOPCodegenAnchor}\n */\nconst signNOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n});\n\n\n//# sourceMappingURL=public_api.fetcher.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/async.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/async.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActivityPoller: () => (/* binding */ createActivityPoller),\n/* harmony export */   withAsyncPolling: () => (/* binding */ withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\");\n\n\n\nconst DEFAULT_REFRESH_INTERVAL_MS = 500;\n/**\n * Wraps a request to create a fetcher with built-in async polling support.\n *\n * @deprecated this function only works with {@link TurnkeyApi}.\n * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.\n */\nfunction withAsyncPolling(params) {\n    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;\n    return async (input) => {\n        const initialResponse = await request(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await (0,_generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__.getActivity)({\n                body: {\n                    activityId: activity.id,\n                    organizationId: activity.organizationId,\n                },\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\n/**\n * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.\n * The default refresh interval is 500ms.\n *\n * The returned poller will poll until the activity becomes `COMPLETED`.\n * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.\n *\n * @example\n * const activityPoller = createActivityPoller(client, client.createPrivateKeys);\n * const activity = await activityPoller(input);\n * console.log(activity.result); // activity is completed\n */\nfunction createActivityPoller(params) {\n    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS, } = params;\n    return async (input) => {\n        const initialResponse = await requestFn(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await client.getActivity({\n                activityId: activity.id,\n                organizationId: activity.organizationId,\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction assertNever(input, message) {\n    throw new Error(message != null ? message : `Unexpected case: ${JSON.stringify(input)}`);\n}\n\n\n//# sourceMappingURL=async.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/async.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/base.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/base.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError),\n/* harmony export */   fetch: () => (/* reexport safe */ _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch),\n/* harmony export */   request: () => (/* binding */ request),\n/* harmony export */   sealAndStampRequestBody: () => (/* binding */ sealAndStampRequestBody),\n/* harmony export */   signedRequest: () => (/* binding */ signedRequest)\n/* harmony export */ });\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/./node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\");\n\n\n\n\n\n\nconst sharedHeaders = {};\nconst sharedRequestOptions = {\n    redirect: \"follow\",\n};\n/**\n * @deprecated\n */\nasync function signedRequest(input) {\n    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const body = JSON.stringify(inputBody);\n    const stamp = await (0,_webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__.getWebAuthnAssertion)(body, input.options);\n    return {\n        url: url.toString(),\n        body,\n        stamp,\n    };\n}\nasync function request(input) {\n    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const { sealedBody, xStamp } = await sealAndStampRequestBody({\n        body: inputBody,\n    });\n    const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), {\n        ...sharedRequestOptions,\n        method,\n        headers: {\n            ...sharedHeaders,\n            ...inputHeaders,\n            \"X-Stamp\": xStamp,\n        },\n        body: sealedBody,\n    });\n    if (!response.ok) {\n        // Can't use native `cause` here because it's not well supported on Node v16\n        // https://node.green/#ES2022-features-Error-cause-property\n        let res;\n        try {\n            res = await response.json();\n        }\n        catch (_) {\n            throw new Error(`${response.status} ${response.statusText}`);\n        }\n        throw new TurnkeyRequestError(res);\n    }\n    const data = await response.json();\n    return data;\n}\nfunction constructUrl(input) {\n    const { uri, query, substitution } = input;\n    const baseUrl = getBaseUrl();\n    const url = new URL(substitutePath(uri, substitution), baseUrl);\n    for (const key in query) {\n        const value = query[key];\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value ?? \"\");\n        }\n    }\n    return url;\n}\nfunction getBaseUrl() {\n    try {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        return baseUrl;\n    }\n    catch (e) {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getBrowserConfig)();\n        return baseUrl;\n    }\n}\nfunction substitutePath(uri, substitutionMap) {\n    let result = uri;\n    const keyList = Object.keys(substitutionMap);\n    for (const key of keyList) {\n        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);\n        invariant(output !== result, `Substitution error: cannot find \"${key}\" in URI \"${uri}\". \\`substitutionMap\\`: ${JSON.stringify(substitutionMap)}`);\n        result = output;\n    }\n    invariant(!/\\{.*\\}/.test(result), `Substitution error: found unsubstituted components in \"${result}\"`);\n    return result;\n}\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nfunction stableStringify(input) {\n    return JSON.stringify(input);\n}\n/**\n * Seals and stamps the request body with your Turnkey API credentials.\n *\n * You can either:\n * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n */\nasync function sealAndStampRequestBody(input) {\n    const { body } = input;\n    let { apiPublicKey, apiPrivateKey } = input;\n    if (!apiPublicKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPublicKey = config.apiPublicKey;\n    }\n    if (!apiPrivateKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPrivateKey = config.apiPrivateKey;\n    }\n    const sealedBody = stableStringify(body);\n    const signature = await (0,_turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__.signWithApiKey)({\n        content: sealedBody,\n        privateKey: apiPrivateKey,\n        publicKey: apiPublicKey,\n    });\n    const sealedStamp = stableStringify({\n        publicKey: apiPublicKey,\n        scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n        signature: signature,\n    });\n    const xStamp = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__.stringToBase64urlString)(sealedStamp);\n    return {\n        sealedBody,\n        xStamp,\n    };\n}\nclass TurnkeyRequestError extends Error {\n    constructor(input) {\n        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;\n        if (input.details != null) {\n            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;\n        }\n        super(turnkeyErrorMessage);\n        this.name = \"TurnkeyRequestError\";\n        this.details = input.details ?? null;\n        this.code = input.code;\n    }\n}\n\n\n//# sourceMappingURL=base.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/base.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/config.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/config.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserInit: () => (/* binding */ browserInit),\n/* harmony export */   getBrowserConfig: () => (/* binding */ getBrowserConfig),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\nconst config = {\n    apiPublicKey: null,\n    apiPrivateKey: null,\n    baseUrl: null,\n};\nconst browserConfig = {\n    baseUrl: null,\n};\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction browserInit(value) {\n    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction init(value) {\n    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, \"apiPublicKey\");\n    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, \"apiPrivateKey\");\n    config.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\nfunction getConfig() {\n    return {\n        apiPublicKey: assertNonEmptyString(config.apiPublicKey, \"apiPublicKey\"),\n        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, \"apiPrivateKey\"),\n        baseUrl: assertNonEmptyString(config.baseUrl, \"baseUrl\"),\n    };\n}\nfunction getBrowserConfig() {\n    return {\n        baseUrl: assertNonEmptyString(browserConfig.baseUrl, \"baseUrl\"),\n    };\n}\nfunction assertNonEmptyString(input, name) {\n    if (typeof input !== \"string\" || !input) {\n        throw new Error(`\"${name}\" must be a non-empty string`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2NvbmZpZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixLQUFLO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFMEQ7QUFDMUQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxodHRwXFxkaXN0XFxjb25maWcubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbmZpZyA9IHtcbiAgICBhcGlQdWJsaWNLZXk6IG51bGwsXG4gICAgYXBpUHJpdmF0ZUtleTogbnVsbCxcbiAgICBiYXNlVXJsOiBudWxsLFxufTtcbmNvbnN0IGJyb3dzZXJDb25maWcgPSB7XG4gICAgYmFzZVVybDogbnVsbCxcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgVHVybmtleUNsaWVudH0gaW5zdGVhZCwgd2hpY2ggZG9lc24ndCByZWx5IG9uIGdsb2JhbCBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAqL1xuZnVuY3Rpb24gYnJvd3NlckluaXQodmFsdWUpIHtcbiAgICBicm93c2VyQ29uZmlnLmJhc2VVcmwgPSBhc3NlcnROb25FbXB0eVN0cmluZyh2YWx1ZS5iYXNlVXJsLCBcImJhc2VVcmxcIik7XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgVHVybmtleUNsaWVudH0gaW5zdGVhZCwgd2hpY2ggZG9lc24ndCByZWx5IG9uIGdsb2JhbCBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAqL1xuZnVuY3Rpb24gaW5pdCh2YWx1ZSkge1xuICAgIGNvbmZpZy5hcGlQdWJsaWNLZXkgPSBhc3NlcnROb25FbXB0eVN0cmluZyh2YWx1ZS5hcGlQdWJsaWNLZXksIFwiYXBpUHVibGljS2V5XCIpO1xuICAgIGNvbmZpZy5hcGlQcml2YXRlS2V5ID0gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcodmFsdWUuYXBpUHJpdmF0ZUtleSwgXCJhcGlQcml2YXRlS2V5XCIpO1xuICAgIGNvbmZpZy5iYXNlVXJsID0gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcodmFsdWUuYmFzZVVybCwgXCJiYXNlVXJsXCIpO1xufVxuZnVuY3Rpb24gZ2V0Q29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwaVB1YmxpY0tleTogYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoY29uZmlnLmFwaVB1YmxpY0tleSwgXCJhcGlQdWJsaWNLZXlcIiksXG4gICAgICAgIGFwaVByaXZhdGVLZXk6IGFzc2VydE5vbkVtcHR5U3RyaW5nKGNvbmZpZy5hcGlQcml2YXRlS2V5LCBcImFwaVByaXZhdGVLZXlcIiksXG4gICAgICAgIGJhc2VVcmw6IGFzc2VydE5vbkVtcHR5U3RyaW5nKGNvbmZpZy5iYXNlVXJsLCBcImJhc2VVcmxcIiksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldEJyb3dzZXJDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZVVybDogYXNzZXJ0Tm9uRW1wdHlTdHJpbmcoYnJvd3NlckNvbmZpZy5iYXNlVXJsLCBcImJhc2VVcmxcIiksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFzc2VydE5vbkVtcHR5U3RyaW5nKGlucHV0LCBuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIiB8fCAhaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7bmFtZX1cIiBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ2ApO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQ7XG59XG5cbmV4cG9ydCB7IGJyb3dzZXJJbml0LCBnZXRCcm93c2VyQ29uZmlnLCBnZXRDb25maWcsIGluaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/config.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicApiService: () => (/* binding */ PublicApiService),\n/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityError),\n/* harmony export */   TurnkeyApi: () => (/* reexport module object */ _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   TurnkeyClient: () => (/* reexport safe */ _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyClient),\n/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.TurnkeyRequestError),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   browserInit: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.browserInit),\n/* harmony export */   createActivityPoller: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.createActivityPoller),\n/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__.getWebAuthnAttestation),\n/* harmony export */   init: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.init),\n/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.sealAndStampRequestBody),\n/* harmony export */   withAsyncPolling: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.client.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\");\n/* harmony import */ var _async_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./async.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/async.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/version.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * @deprecated use `TurnkeyApi` instead\n */\nconst PublicApiService = _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE0RztBQUNQO0FBQ3BEO0FBQ3lCO0FBQ3RCO0FBQ0k7QUFDYTtBQUM3Qjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZGQUFrQjs7QUFFbUI7QUFDOUQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxodHRwXFxkaXN0XFxpbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcHVibGljX2FwaV9mZXRjaGVyIGZyb20gJy4vX19nZW5lcmF0ZWRfXy9zZXJ2aWNlcy9jb29yZGluYXRvci9wdWJsaWMvdjEvcHVibGljX2FwaS5mZXRjaGVyLm1qcyc7XG5leHBvcnQgeyBUdXJua2V5Q2xpZW50IH0gZnJvbSAnLi9fX2dlbmVyYXRlZF9fL3NlcnZpY2VzL2Nvb3JkaW5hdG9yL3B1YmxpYy92MS9wdWJsaWNfYXBpLmNsaWVudC5tanMnO1xuZXhwb3J0IHsgYnJvd3NlckluaXQsIGluaXQgfSBmcm9tICcuL2NvbmZpZy5tanMnO1xuZXhwb3J0IHsgVHVybmtleVJlcXVlc3RFcnJvciwgc2VhbEFuZFN0YW1wUmVxdWVzdEJvZHkgfSBmcm9tICcuL2Jhc2UubWpzJztcbmV4cG9ydCB7IFR1cm5rZXlBY3Rpdml0eUVycm9yIH0gZnJvbSAnLi9zaGFyZWQubWpzJztcbmV4cG9ydCB7IGdldFdlYkF1dGhuQXR0ZXN0YXRpb24gfSBmcm9tICcuL3dlYmF1dGhuLm1qcyc7XG5leHBvcnQgeyBjcmVhdGVBY3Rpdml0eVBvbGxlciwgd2l0aEFzeW5jUG9sbGluZyB9IGZyb20gJy4vYXN5bmMubWpzJztcbmV4cG9ydCB7IFZFUlNJT04gfSBmcm9tICcuL3ZlcnNpb24ubWpzJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgYFR1cm5rZXlBcGlgIGluc3RlYWRcbiAqL1xuY29uc3QgUHVibGljQXBpU2VydmljZSA9IHB1YmxpY19hcGlfZmV0Y2hlcjtcblxuZXhwb3J0IHsgUHVibGljQXBpU2VydmljZSwgcHVibGljX2FwaV9mZXRjaGVyIGFzIFR1cm5rZXlBcGkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/shared.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/shared.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyActivityError: () => (/* binding */ TurnkeyActivityError)\n/* harmony export */ });\nclass TurnkeyActivityError extends Error {\n    constructor(input) {\n        const { message, cause, activityId, activityStatus, activityType } = input;\n        super(message);\n        this.name = \"TurnkeyActivityError\";\n        this.activityId = activityId ?? null;\n        this.activityStatus = activityStatus ?? null;\n        this.activityType = activityType ?? null;\n        this.cause = cause ?? null;\n    }\n}\n\n\n//# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3NoYXJlZC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSxnQkFBZ0IsMkRBQTJEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDO0FBQ2hDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhY2hhXFxUZXN0XFxldGhnbFxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcaHR0cFxcZGlzdFxcc2hhcmVkLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBUdXJua2V5QWN0aXZpdHlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgICAgICBjb25zdCB7IG1lc3NhZ2UsIGNhdXNlLCBhY3Rpdml0eUlkLCBhY3Rpdml0eVN0YXR1cywgYWN0aXZpdHlUeXBlIH0gPSBpbnB1dDtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVHVybmtleUFjdGl2aXR5RXJyb3JcIjtcbiAgICAgICAgdGhpcy5hY3Rpdml0eUlkID0gYWN0aXZpdHlJZCA/PyBudWxsO1xuICAgICAgICB0aGlzLmFjdGl2aXR5U3RhdHVzID0gYWN0aXZpdHlTdGF0dXMgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5hY3Rpdml0eVR5cGUgPSBhY3Rpdml0eVR5cGUgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlID8/IG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQgeyBUdXJua2V5QWN0aXZpdHlFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/shared.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/universal.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/universal.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n\n\n/// <reference lib=\"dom\" />\n// This is useful for mocking fetch in tests.\nconst fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch;\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3VuaXZlcnNhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7O0FBRS9DO0FBQ0E7QUFDQSxjQUFjLDhDQUFPOztBQUVKO0FBQ2pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhY2hhXFxUZXN0XFxldGhnbFxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcaHR0cFxcZGlzdFxcdW5pdmVyc2FsLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmZXRjaCBhcyBmZXRjaCQxIH0gZnJvbSAnY3Jvc3MtZmV0Y2gnO1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuLy8gVGhpcyBpcyB1c2VmdWwgZm9yIG1vY2tpbmcgZmV0Y2ggaW4gdGVzdHMuXG5jb25zdCBmZXRjaCA9IGZldGNoJDE7XG5cbmV4cG9ydCB7IGZldGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bml2ZXJzYWwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/universal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/version.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/version.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"@turnkey/http@2.12.2\";\n\n\n//# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFbUI7QUFDbkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxodHRwXFxkaXN0XFx2ZXJzaW9uLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBWRVJTSU9OID0gXCJAdHVybmtleS9odHRwQDIuMTIuMlwiO1xuXG5leHBvcnQgeyBWRVJTSU9OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/version.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/api.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createResponseToJSON: () => (/* binding */ createResponseToJSON),\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction createResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAttestation, credential);\n}\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNaO0FBQzREOztBQUVwRztBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSwyRUFBa0M7QUFDeEU7QUFDQTtBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSx5RUFBZ0M7QUFDdEU7O0FBRW1EO0FBQ25EIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhY2hhXFxUZXN0XFxldGhnbFxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcaHR0cFxcZGlzdFxcd2ViYXV0aG4tanNvblxcYXBpLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9IGZyb20gJy4vYmFzZTY0dXJsLm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSAnLi9jb252ZXJ0Lm1qcyc7XG5pbXBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEF0dGVzdGF0aW9uLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiB9IGZyb20gJy4vc2NoZW1hLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlVG9KU09OKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gY29udmVydChidWZmZXJUb0Jhc2U2NHVybCwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiwgY3JlZGVudGlhbCk7XG59XG5mdW5jdGlvbiBnZXRSZXNwb25zZVRvSlNPTihjcmVkZW50aWFsKSB7XG4gICAgcmV0dXJuIGNvbnZlcnQoYnVmZmVyVG9CYXNlNjR1cmwsIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uLCBjcmVkZW50aWFsKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVzcG9uc2VUb0pTT04sIGdldFJlc3BvbnNlVG9KU09OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxodHRwXFxkaXN0XFx3ZWJhdXRobi1qc29uXFxiYXNlNjR1cmwubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ1ZmZlclRvQmFzZTY0dXJsKGJ1ZmZlcikge1xuICAgIC8vIEJ1ZmZlciB0byBiaW5hcnkgc3RyaW5nXG4gICAgY29uc3QgYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgY2hhckNvZGUgb2YgYnl0ZVZpZXcpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgIH1cbiAgICAvLyBCaW5hcnkgc3RyaW5nIHRvIGJhc2U2NFxuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2Eoc3RyKTtcbiAgICAvLyBCYXNlNjQgdG8gYmFzZTY0dXJsXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIGJhc2U2NHVybCBzdHJpbmcgaXMgd2VsbC1mb3JtZWQuXG4gICAgY29uc3QgYmFzZTY0dXJsU3RyaW5nID0gYmFzZTY0U3RyaW5nXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpXG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIHJldHVybiBiYXNlNjR1cmxTdHJpbmc7XG59XG5cbmV4cG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR1cmwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RTtBQUN6RSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYWNoYVxcVGVzdFxcZXRoZ2xcXG5vZGVfbW9kdWxlc1xcQHR1cm5rZXlcXGh0dHBcXGRpc3RcXHdlYmF1dGhuLWpzb25cXGNvbnZlcnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIGV4cG9ydCB0aGVzZSB2YWx1ZXMgaW4gb3JkZXIgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIHRvIGRlZHVwbGljYXRlXG4vLyBzY2hlbWEgZGVmaW5pdGlvbnMgaW4gbWluaWZpZWQgSlMgY29kZS5cbi8vIFRPRE86IFBhcmNlbCBpc24ndCBkZWR1cGxpY2F0aW5nIHRoZXNlIHZhbHVlcy5cbmNvbnN0IGNvcHlWYWx1ZSA9IFwiY29weVwiO1xuY29uc3QgY29udmVydFZhbHVlID0gXCJjb252ZXJ0XCI7XG5mdW5jdGlvbiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hLCBpbnB1dCkge1xuICAgIGlmIChzY2hlbWEgPT09IGNvcHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgPT09IGNvbnZlcnRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY29udmVyc2lvbkZuKGlucHV0KTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5tYXAoKHYpID0+IGNvbnZlcnQoY29udmVyc2lvbkZuLCBzY2hlbWFbMF0sIHYpKTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBzY2hlbWFGaWVsZF0gb2YgT2JqZWN0LmVudHJpZXMoc2NoZW1hKSkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpZWxkLmRlcml2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzY2hlbWFGaWVsZC5kZXJpdmUoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaWVsZHMgY2FuIGJlIG51bGwgKHJhdGhlciB0aGFuIG1pc3Npbmcgb3IgYHVuZGVmaW5lZGApLCBlLmcuIHRoZVxuICAgICAgICAgICAgLy8gYHVzZXJIYW5kbGVgIGZpZWxkIG9mIHRoZSBgQXV0aGVudGljYXRvckFzc2VydGlvblJlc3BvbnNlYDpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdXRobi8jaWZhY2UtYXV0aGVudGljYXRvcmFzc2VydGlvbnJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoaW5wdXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hRmllbGQuc2NoZW1hLCBpbnB1dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc2NoZW1hLCBkZXJpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBkZXJpdmUsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlcXVpcmVkKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzY2hlbWEsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9wdGlvbmFsKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnQsIGNvbnZlcnRWYWx1ZSwgY29weVZhbHVlLCBkZXJpdmVkLCBvcHRpb25hbCwgcmVxdWlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/api.mjs\");\n\n\nasync function create(options) {\n    const response = (await navigator.credentials.create(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.createResponseToJSON)(response);\n    return response;\n}\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRTs7QUFFcEU7QUFDQTtBQUNBLDRCQUE0Qiw4REFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkRBQWlCO0FBQzdDO0FBQ0E7O0FBRXVCO0FBQ3ZCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhY2hhXFxUZXN0XFxldGhnbFxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcaHR0cFxcZGlzdFxcd2ViYXV0aG4tanNvblxcaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlc3BvbnNlVG9KU09OLCBnZXRSZXNwb25zZVRvSlNPTiB9IGZyb20gJy4vYXBpLm1qcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmNyZWF0ZShvcHRpb25zKSk7XG4gICAgcmVzcG9uc2UudG9KU09OID0gKCkgPT4gY3JlYXRlUmVzcG9uc2VUb0pTT04ocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldChvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmdldChvcHRpb25zKSk7XG4gICAgcmVzcG9uc2UudG9KU09OID0gKCkgPT4gZ2V0UmVzcG9uc2VUb0pTT04ocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlLCBnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion),\n/* harmony export */   publicKeyCredentialWithAttestation: () => (/* binding */ publicKeyCredentialWithAttestation)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.create()` response\nconst publicKeyCredentialWithAttestation = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        attestationObject: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        transports: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue, (response) => response.getTransports?.() || []),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUY7O0FBRXJGO0FBQ0EsV0FBVyxzREFBUSxDQUFDLG1EQUFTO0FBQzdCLGtCQUFrQixzREFBUSxDQUFDLG1EQUFTO0FBQ3BDLGVBQWUsc0RBQVEsQ0FBQyxtREFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQSxVQUFVLHNEQUFRLENBQUMsbURBQVM7QUFDNUIsUUFBUSxzREFBUSxDQUFDLG1EQUFTO0FBQzFCLFdBQVcsc0RBQVEsQ0FBQyxzREFBWTtBQUNoQyw2QkFBNkIsc0RBQVEsQ0FBQyxtREFBUztBQUMvQyxjQUFjLHNEQUFRO0FBQ3RCLHdCQUF3QixzREFBUSxDQUFDLHNEQUFZO0FBQzdDLDJCQUEyQixzREFBUSxDQUFDLHNEQUFZO0FBQ2hELG9CQUFvQixxREFBTyxDQUFDLG1EQUFTO0FBQ3JDLEtBQUs7QUFDTCw0QkFBNEIscURBQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzREFBUSxDQUFDLG1EQUFTO0FBQzVCLFFBQVEsc0RBQVEsQ0FBQyxtREFBUztBQUMxQixXQUFXLHNEQUFRLENBQUMsc0RBQVk7QUFDaEMsNkJBQTZCLHNEQUFRLENBQUMsbURBQVM7QUFDL0MsY0FBYyxzREFBUTtBQUN0Qix3QkFBd0Isc0RBQVEsQ0FBQyxzREFBWTtBQUM3QywyQkFBMkIsc0RBQVEsQ0FBQyxzREFBWTtBQUNoRCxtQkFBbUIsc0RBQVEsQ0FBQyxzREFBWTtBQUN4QyxvQkFBb0Isc0RBQVEsQ0FBQyxzREFBWTtBQUN6QyxLQUFLO0FBQ0wsNEJBQTRCLHFEQUFPO0FBQ25DOztBQUVnRjtBQUNoRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYWNoYVxcVGVzdFxcZXRoZ2xcXG5vZGVfbW9kdWxlc1xcQHR1cm5rZXlcXGh0dHBcXGRpc3RcXHdlYmF1dGhuLWpzb25cXHNjaGVtYS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVxdWlyZWQsIG9wdGlvbmFsLCBkZXJpdmVkLCBjb3B5VmFsdWUsIGNvbnZlcnRWYWx1ZSB9IGZyb20gJy4vY29udmVydC5tanMnO1xuXG5jb25zdCBzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSA9IHtcbiAgICBhcHBpZDogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICBhcHBpZEV4Y2x1ZGU6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgY3JlZFByb3BzOiBvcHRpb25hbChjb3B5VmFsdWUpLFxufTtcbi8vIGBuYXZpZ2F0b3IuY3JlYXRlKClgIHJlc3BvbnNlXG5jb25zdCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEF0dGVzdGF0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF0dGVzdGF0aW9uT2JqZWN0OiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICB0cmFuc3BvcnRzOiBkZXJpdmVkKGNvcHlWYWx1ZSwgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5nZXRUcmFuc3BvcnRzPy4oKSB8fCBbXSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuLy8gYG5hdmlnYXRvci5nZXQoKWAgcmVzcG9uc2VcbmNvbnN0IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF1dGhlbnRpY2F0b3JEYXRhOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBzaWduYXR1cmU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHVzZXJIYW5kbGU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuXG5leHBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@turnkey/http/dist/webauthn.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWebAuthnAssertion: () => (/* binding */ getWebAuthnAssertion),\n/* harmony export */   getWebAuthnAttestation: () => (/* binding */ getWebAuthnAttestation),\n/* harmony export */   protocolTransportEnumToInternalEnum: () => (/* binding */ protocolTransportEnumToInternalEnum)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/./node_modules/@turnkey/http/dist/webauthn-json/index.mjs\");\n\n\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\nconst defaultSigningOptions = {\n    publicKey: {\n        timeout: defaultTimeout,\n        userVerification: defaultUserVerification,\n    },\n};\nasync function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {\n    const challenge = await getChallengeFromPayload(payload);\n    const signingOptions = {\n        ...tkSigningOptions,\n        publicKey: {\n            ...defaultSigningOptions.publicKey,\n            ...tkSigningOptions.publicKey,\n            challenge,\n        },\n    };\n    return signingOptions;\n}\nasync function getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\n    const hexString = Buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = Buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */\nfunction protocolTransportEnumToInternalEnum(protocolEnum) {\n    switch (protocolEnum) {\n        case \"internal\": {\n            return \"AUTHENTICATOR_TRANSPORT_INTERNAL\";\n        }\n        case \"usb\": {\n            return \"AUTHENTICATOR_TRANSPORT_USB\";\n        }\n        case \"nfc\": {\n            return \"AUTHENTICATOR_TRANSPORT_NFC\";\n        }\n        case \"ble\": {\n            return \"AUTHENTICATOR_TRANSPORT_BLE\";\n        }\n        case \"hybrid\": {\n            return \"AUTHENTICATOR_TRANSPORT_HYBRID\";\n        }\n        default: {\n            throw new Error(\"unsupported transport format\");\n        }\n    }\n}\nfunction toInternalAttestation(attestation) {\n    return {\n        credentialId: attestation.rawId,\n        attestationObject: attestation.response.attestationObject,\n        clientDataJson: attestation.response.clientDataJSON,\n        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum),\n    };\n}\nasync function getWebAuthnAssertion(payload, options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const signingOptions = await getCredentialRequestOptions(payload, options);\n    const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n    const assertion = clientGetResult.toJSON();\n    const stamp = {\n        authenticatorData: assertion.response.authenticatorData,\n        clientDataJson: assertion.response.clientDataJSON,\n        credentialId: assertion.id,\n        signature: assertion.response.signature,\n    };\n    return JSON.stringify(stamp);\n}\nasync function getWebAuthnAttestation(options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const res = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.create)(options);\n    return toInternalAttestation(res.toJSON());\n}\n// `hasWebAuthnSupport` checks for barebones webauthn support.\n// For additional details and granular settings, see:\n// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\nfunction hasWebAuthnSupport() {\n    return !!window.PublicKeyCredential;\n}\n\n\n//# sourceMappingURL=webauthn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEOztBQUV4RCxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyw2REFBRztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUFNO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZGO0FBQzdGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhY2hhXFxUZXN0XFxldGhnbFxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcaHR0cFxcZGlzdFxcd2ViYXV0aG4ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZSwgZ2V0IH0gZnJvbSAnLi93ZWJhdXRobi1qc29uL2luZGV4Lm1qcyc7XG5cbmNvbnN0IGRlZmF1bHRUaW1lb3V0ID0gNSAqIDYwICogMTAwMDsgLy8gZml2ZSBtaW51dGVzXG5jb25zdCBkZWZhdWx0VXNlclZlcmlmaWNhdGlvbiA9IFwicHJlZmVycmVkXCI7XG5jb25zdCBkZWZhdWx0U2lnbmluZ09wdGlvbnMgPSB7XG4gICAgcHVibGljS2V5OiB7XG4gICAgICAgIHRpbWVvdXQ6IGRlZmF1bHRUaW1lb3V0LFxuICAgICAgICB1c2VyVmVyaWZpY2F0aW9uOiBkZWZhdWx0VXNlclZlcmlmaWNhdGlvbixcbiAgICB9LFxufTtcbmFzeW5jIGZ1bmN0aW9uIGdldENyZWRlbnRpYWxSZXF1ZXN0T3B0aW9ucyhwYXlsb2FkLCB0a1NpZ25pbmdPcHRpb25zID0gZGVmYXVsdFNpZ25pbmdPcHRpb25zKSB7XG4gICAgY29uc3QgY2hhbGxlbmdlID0gYXdhaXQgZ2V0Q2hhbGxlbmdlRnJvbVBheWxvYWQocGF5bG9hZCk7XG4gICAgY29uc3Qgc2lnbmluZ09wdGlvbnMgPSB7XG4gICAgICAgIC4uLnRrU2lnbmluZ09wdGlvbnMsXG4gICAgICAgIHB1YmxpY0tleToge1xuICAgICAgICAgICAgLi4uZGVmYXVsdFNpZ25pbmdPcHRpb25zLnB1YmxpY0tleSxcbiAgICAgICAgICAgIC4uLnRrU2lnbmluZ09wdGlvbnMucHVibGljS2V5LFxuICAgICAgICAgICAgY2hhbGxlbmdlLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHNpZ25pbmdPcHRpb25zO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2hhbGxlbmdlRnJvbVBheWxvYWQocGF5bG9hZCkge1xuICAgIGNvbnN0IG1lc3NhZ2VCdWZmZXIgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUocGF5bG9hZCk7XG4gICAgY29uc3QgaGFzaEJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KFwiU0hBLTI1NlwiLCBtZXNzYWdlQnVmZmVyKTtcbiAgICBjb25zdCBoZXhTdHJpbmcgPSBCdWZmZXIuZnJvbShoYXNoQnVmZmVyKS50b1N0cmluZyhcImhleFwiKTtcbiAgICBjb25zdCBoZXhCdWZmZXIgPSBCdWZmZXIuZnJvbShoZXhTdHJpbmcsIFwidXRmOFwiKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaGV4QnVmZmVyKTtcbn1cbi8qIFB1bGxlZCBmcm9tIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdXRobi0yLyNlbnVtLXRyYW5zcG9ydCAqL1xuZnVuY3Rpb24gcHJvdG9jb2xUcmFuc3BvcnRFbnVtVG9JbnRlcm5hbEVudW0ocHJvdG9jb2xFbnVtKSB7XG4gICAgc3dpdGNoIChwcm90b2NvbEVudW0pIHtcbiAgICAgICAgY2FzZSBcImludGVybmFsXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX0lOVEVSTkFMXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInVzYlwiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9VU0JcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwibmZjXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX05GQ1wiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJibGVcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfQkxFXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImh5YnJpZFwiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9IWUJSSURcIjtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCB0cmFuc3BvcnQgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdG9JbnRlcm5hbEF0dGVzdGF0aW9uKGF0dGVzdGF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3JlZGVudGlhbElkOiBhdHRlc3RhdGlvbi5yYXdJZCxcbiAgICAgICAgYXR0ZXN0YXRpb25PYmplY3Q6IGF0dGVzdGF0aW9uLnJlc3BvbnNlLmF0dGVzdGF0aW9uT2JqZWN0LFxuICAgICAgICBjbGllbnREYXRhSnNvbjogYXR0ZXN0YXRpb24ucmVzcG9uc2UuY2xpZW50RGF0YUpTT04sXG4gICAgICAgIHRyYW5zcG9ydHM6IGF0dGVzdGF0aW9uLnJlc3BvbnNlLnRyYW5zcG9ydHMubWFwKHByb3RvY29sVHJhbnNwb3J0RW51bVRvSW50ZXJuYWxFbnVtKSxcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0V2ViQXV0aG5Bc3NlcnRpb24ocGF5bG9hZCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHdlYkF1dGhuU3VwcG9ydGVkID0gaGFzV2ViQXV0aG5TdXBwb3J0KCk7XG4gICAgaWYgKCF3ZWJBdXRoblN1cHBvcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWJhdXRobiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclwiKTtcbiAgICB9XG4gICAgY29uc3Qgc2lnbmluZ09wdGlvbnMgPSBhd2FpdCBnZXRDcmVkZW50aWFsUmVxdWVzdE9wdGlvbnMocGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgY29uc3QgY2xpZW50R2V0UmVzdWx0ID0gYXdhaXQgZ2V0KHNpZ25pbmdPcHRpb25zKTtcbiAgICBjb25zdCBhc3NlcnRpb24gPSBjbGllbnRHZXRSZXN1bHQudG9KU09OKCk7XG4gICAgY29uc3Qgc3RhbXAgPSB7XG4gICAgICAgIGF1dGhlbnRpY2F0b3JEYXRhOiBhc3NlcnRpb24ucmVzcG9uc2UuYXV0aGVudGljYXRvckRhdGEsXG4gICAgICAgIGNsaWVudERhdGFKc29uOiBhc3NlcnRpb24ucmVzcG9uc2UuY2xpZW50RGF0YUpTT04sXG4gICAgICAgIGNyZWRlbnRpYWxJZDogYXNzZXJ0aW9uLmlkLFxuICAgICAgICBzaWduYXR1cmU6IGFzc2VydGlvbi5yZXNwb25zZS5zaWduYXR1cmUsXG4gICAgfTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhbXApO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0V2ViQXV0aG5BdHRlc3RhdGlvbihvcHRpb25zKSB7XG4gICAgY29uc3Qgd2ViQXV0aG5TdXBwb3J0ZWQgPSBoYXNXZWJBdXRoblN1cHBvcnQoKTtcbiAgICBpZiAoIXdlYkF1dGhuU3VwcG9ydGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndlYmF1dGhuIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXCIpO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCBjcmVhdGUob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRvSW50ZXJuYWxBdHRlc3RhdGlvbihyZXMudG9KU09OKCkpO1xufVxuLy8gYGhhc1dlYkF1dGhuU3VwcG9ydGAgY2hlY2tzIGZvciBiYXJlYm9uZXMgd2ViYXV0aG4gc3VwcG9ydC5cbi8vIEZvciBhZGRpdGlvbmFsIGRldGFpbHMgYW5kIGdyYW51bGFyIHNldHRpbmdzLCBzZWU6XG4vLyBodHRwczovL3dlYi5kZXYvYXJ0aWNsZXMvcGFzc2tleS1mb3JtLWF1dG9maWxsI2ZlYXR1cmUtZGV0ZWN0aW9uLCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUHVibGljS2V5Q3JlZGVudGlhbFxuZnVuY3Rpb24gaGFzV2ViQXV0aG5TdXBwb3J0KCkge1xuICAgIHJldHVybiAhIXdpbmRvdy5QdWJsaWNLZXlDcmVkZW50aWFsO1xufVxuXG5leHBvcnQgeyBnZXRXZWJBdXRobkFzc2VydGlvbiwgZ2V0V2ViQXV0aG5BdHRlc3RhdGlvbiwgcHJvdG9jb2xUcmFuc3BvcnRFbnVtVG9JbnRlcm5hbEVudW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlYmF1dGhuLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/http/dist/webauthn.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/iframe-stamper/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@turnkey/iframe-stamper/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IframeEventType: () => (/* binding */ IframeEventType),\n/* harmony export */   IframeStamper: () => (/* binding */ IframeStamper),\n/* harmony export */   KeyFormat: () => (/* binding */ KeyFormat)\n/* harmony export */ });\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// Set of constants for event types expected to be sent and received between a parent page and its iframe.\nvar IframeEventType;\n(function (IframeEventType) {\n    // Event sent by the iframe to its parent to indicate readiness.\n    // Value: the iframe public key\n    IframeEventType[\"PublicKeyReady\"] = \"PUBLIC_KEY_READY\";\n    // Event sent by the parent to inject a credential bundle (for recovery or auth) into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectCredentialBundle\"] = \"INJECT_CREDENTIAL_BUNDLE\";\n    // Event sent by the parent to inject a private key export bundle into the iframe.\n    // Value: the bundle to inject\n    // Key Format (optional): the key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    // Public Key (optional): the public key of the exported private key. Required when the key format is SOLANA.\n    IframeEventType[\"InjectKeyExportBundle\"] = \"INJECT_KEY_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject a wallet export bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectWalletExportBundle\"] = \"INJECT_WALLET_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject an import bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectImportBundle\"] = \"INJECT_IMPORT_BUNDLE\";\n    // Event sent by the parent to extract an encrypted wallet bundle from the iframe.\n    // Value: none\n    IframeEventType[\"ExtractWalletEncryptedBundle\"] = \"EXTRACT_WALLET_ENCRYPTED_BUNDLE\";\n    // Event sent by the parent to extract an encrypted private key bundle from the iframe.\n    // Value: none\n    // Key Format (optional): the key format to decode the private key in before it's encrypted for import: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    IframeEventType[\"ExtractKeyEncryptedBundle\"] = \"EXTRACT_KEY_ENCRYPTED_BUNDLE\";\n    // Event sent by the parent to apply settings on the iframe.\n    // Value: the settings to apply in JSON string format.\n    IframeEventType[\"ApplySettings\"] = \"APPLY_SETTINGS\";\n    // Event sent by the iframe to its parent when `InjectBundle` is successful\n    // Value: true (boolean)\n    IframeEventType[\"BundleInjected\"] = \"BUNDLE_INJECTED\";\n    // Event sent by the iframe to its parent when `ExtractEncryptedBundle` is successful\n    // Value: the bundle encrypted in the iframe\n    IframeEventType[\"EncryptedBundleExtracted\"] = \"ENCRYPTED_BUNDLE_EXTRACTED\";\n    // Event sent by the iframe to its parent when `ApplySettings` is successful\n    // Value: true (boolean)\n    IframeEventType[\"SettingsApplied\"] = \"SETTINGS_APPLIED\";\n    // Event sent by the parent page to request a signature\n    // Value: payload to sign\n    IframeEventType[\"StampRequest\"] = \"STAMP_REQUEST\";\n    // Event sent by the iframe to communicate the result of a stamp operation.\n    // Value: signed payload\n    IframeEventType[\"Stamp\"] = \"STAMP\";\n    // Event sent by the iframe to communicate an error\n    // Value: serialized error\n    IframeEventType[\"Error\"] = \"ERROR\";\n})(IframeEventType || (IframeEventType = {}));\n// Set of constants for private key formats. These formats map to the encoding type used on a private key before encrypting and importing it\n// or after exporting it and decrypting it.\nvar KeyFormat;\n(function (KeyFormat) {\n    // 64 hexadecimal digits. Key format used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum and Tron keys\n    KeyFormat[\"Hexadecimal\"] = \"HEXADECIMAL\";\n    // Key format used by Phantom and Solflare for Solana keys\n    KeyFormat[\"Solana\"] = \"SOLANA\";\n})(KeyFormat || (KeyFormat = {}));\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n * Creating a stamper inserts an iframe in the current page.\n */\nclass IframeStamper {\n    /**\n     * Creates a new iframe stamper. This function _does not_ insert the iframe in the DOM.\n     * Call `.init()` to insert the iframe element in the DOM.\n     */\n    constructor(config) {\n        if (typeof window === \"undefined\") {\n            throw new Error(\"Cannot initialize iframe in non-browser environment\");\n        }\n        if (!config.iframeContainer) {\n            throw new Error(\"Iframe container cannot be found\");\n        }\n        this.container = config.iframeContainer;\n        if (this.container.querySelector(`#${config.iframeElementId}`)) {\n            throw new Error(`Iframe element with ID ${config.iframeElementId} already exists`);\n        }\n        let iframe = window.document.createElement(\"iframe\");\n        // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#sandbox\n        // We do not need any other permission than running scripts for import/export/auth frames.\n        iframe.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin\");\n        iframe.id = config.iframeElementId;\n        iframe.src = config.iframeUrl;\n        this.iframe = iframe;\n        const iframeUrl = new URL(config.iframeUrl);\n        this.iframeOrigin = iframeUrl.origin;\n        // This is populated once the iframe is ready. Call `.init()` to kick off DOM insertion!\n        this.iframePublicKey = null;\n    }\n    /**\n     * Inserts the iframe on the page and returns a promise resolving to the iframe's public key\n     */\n    async init() {\n        this.container.appendChild(this.iframe);\n        return new Promise((resolve, _reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out\n                    return;\n                }\n                if (event.data?.type === IframeEventType.PublicKeyReady) {\n                    this.iframePublicKey = event.data[\"value\"];\n                    resolve(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Removes the iframe from the DOM\n     */\n    clear() {\n        this.iframe.remove();\n    }\n    /**\n     * Returns the public key, or `null` if the underlying iframe isn't properly initialized.\n     */\n    publicKey() {\n        return this.iframePublicKey;\n    }\n    /**\n     * Function to inject a new credential into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during recovery and auth flows.\n     */\n    async injectCredentialBundle(bundle) {\n        return new Promise((resolve, reject) => {\n            this.iframe.contentWindow?.postMessage({\n                type: IframeEventType.InjectCredentialBundle,\n                value: bundle,\n            }, \"*\");\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key export flow.\n     */\n    async injectKeyExportBundle(bundle, organizationId, keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectKeyExportBundle,\n            value: bundle,\n            keyFormat,\n            organizationId,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet export flow.\n     */\n    async injectWalletExportBundle(bundle, organizationId) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectWalletExportBundle,\n            value: bundle,\n            organizationId,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an import bundle into the iframe\n     * This is used to initiate either the wallet import flow or the private key import flow.\n     */\n    async injectImportBundle(bundle, organizationId, userId) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectImportBundle,\n            value: bundle,\n            organizationId,\n            userId,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet import flow.\n     */\n    async extractWalletEncryptedBundle() {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractWalletEncryptedBundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in before it's encrypted and imported: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key import flow.\n     */\n    async extractKeyEncryptedBundle(keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractKeyEncryptedBundle,\n            keyFormat: keyFormat,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to apply settings on allowed parameters in the iframe\n     * This is used to style the HTML element used for plaintext in wallet and private key import.\n     */\n    async applySettings(settings) {\n        const settingsStr = JSON.stringify(settings);\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ApplySettings,\n            value: settingsStr,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.SettingsApplied) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to sign a payload with the underlying iframe\n     */\n    async stamp(payload) {\n        if (this.iframePublicKey === null) {\n            throw new Error(\"null iframe public key. Have you called/awaited .init()?\");\n        }\n        const iframeOrigin = this.iframeOrigin;\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.StampRequest,\n            value: payload,\n        }, \"*\");\n        return new Promise(function (resolve, reject) {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.Stamp) {\n                    resolve({\n                        stampHeaderName: stampHeaderName,\n                        stampHeaderValue: event.data[\"value\"],\n                    });\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/iframe-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/viem/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@turnkey/viem/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccount: () => (/* binding */ createAccount),\n/* harmony export */   createApiKeyAccount: () => (/* binding */ createApiKeyAccount),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signTypedData: () => (/* binding */ signTypedData)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/isAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/transaction/serializeTransaction.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/signature/hashMessage.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/signature/hashTypedData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/signature/serializeSignature.js\");\n/* harmony import */ var viem_accounts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/accounts */ \"(ssr)/./node_modules/viem/_esm/accounts/toAccount.js\");\n/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/http */ \"(ssr)/./node_modules/@turnkey/http/dist/index.mjs\");\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/./node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n\n\n\n\n\nasync function createAccount(input) {\n    const { client, organizationId, signWith } = input;\n    let { ethereumAddress } = input;\n    if (!signWith) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Missing signWith parameter`,\n        });\n    }\n    if ((0,viem__WEBPACK_IMPORTED_MODULE_2__.isAddress)(signWith)) {\n        // override provided `ethereumAddress`\n        ethereumAddress = signWith;\n    }\n    else if (!ethereumAddress) {\n        // we have a private key ID, but not an ethereumAddress\n        const data = await client.getPrivateKey({\n            privateKeyId: signWith,\n            organizationId: organizationId,\n        });\n        ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n        if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Unable to find Ethereum address for key ${signWith} under organization ${organizationId}`,\n            });\n        }\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, signWith);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, signWith);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, signWith);\n        },\n    });\n}\n/**\n * Creates a new Custom Account backed by a Turnkey API key.\n * @deprecated use {@link createAccount} instead.\n */\nasync function createApiKeyAccount(config) {\n    const { apiPublicKey, apiPrivateKey, baseUrl, organizationId, privateKeyId } = config;\n    const stamper = new _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__.ApiKeyStamper({\n        apiPublicKey: apiPublicKey,\n        apiPrivateKey: apiPrivateKey,\n    });\n    const client = new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient({\n        baseUrl: baseUrl,\n    }, stamper);\n    const data = await client.getPrivateKey({\n        privateKeyId: privateKeyId,\n        organizationId: organizationId,\n    });\n    const ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n    if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Unable to find Ethereum address for key ${privateKeyId} under organization ${organizationId}`,\n        });\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, privateKeyId);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, privateKeyId);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, privateKeyId);\n        },\n    });\n}\nasync function signMessage(client, message, organizationId, signWith) {\n    const hashedMessage = (0,viem__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(message);\n    const signedMessage = await signMessageWithErrorWrapping(client, hashedMessage, organizationId, signWith);\n    return `${signedMessage}`;\n}\nasync function signTransaction(client, transaction, serializer, organizationId, signWith) {\n    const serializedTx = serializer(transaction);\n    const nonHexPrefixedSerializedTx = serializedTx.replace(/^0x/, \"\");\n    return await signTransactionWithErrorWrapping(client, nonHexPrefixedSerializedTx, organizationId, signWith);\n}\nasync function signTypedData(client, data, organizationId, signWith) {\n    const hashToSign = (0,viem__WEBPACK_IMPORTED_MODULE_6__.hashTypedData)(data);\n    return await signMessageWithErrorWrapping(client, hashToSign, organizationId, signWith);\n}\nasync function signTransactionWithErrorWrapping(client, unsignedTransaction, organizationId, signWith) {\n    let signedTx;\n    try {\n        signedTx = await signTransactionImpl(client, unsignedTransaction, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign transaction: ${error.message}`,\n            cause: error,\n        });\n    }\n    return `0x${signedTx}`;\n}\nasync function signTransactionImpl(client, unsignedTransaction, organizationId, signWith) {\n    if (client instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient) {\n        const { activity } = await client.signTransaction({\n            type: \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\",\n            organizationId: organizationId,\n            parameters: {\n                signWith,\n                type: \"TRANSACTION_TYPE_ETHEREUM\",\n                unsignedTransaction: unsignedTransaction,\n            },\n            timestampMs: String(Date.now()), // millisecond timestamp\n        });\n        const { id, status, type } = activity;\n        if (activity.status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Invalid activity status: ${activity.status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        return assertNonNull(activity?.result?.signTransactionResult?.signedTransaction);\n    }\n    else {\n        // Want to get additional activity details here\n        const activity = await client.signTransaction({\n            signWith,\n            type: \"TRANSACTION_TYPE_ETHEREUM\",\n            unsignedTransaction: unsignedTransaction,\n        });\n        return assertNonNull(activity?.signedTransaction);\n    }\n}\nasync function signMessageWithErrorWrapping(client, message, organizationId, signWith) {\n    let signedMessage;\n    try {\n        signedMessage = await signMessageImpl(client, message, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign: ${error.message}`,\n            cause: error,\n        });\n    }\n    return signedMessage;\n}\nasync function signMessageImpl(client, message, organizationId, signWith) {\n    let result;\n    if (client instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient) {\n        const { activity } = await client.signRawPayload({\n            type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\",\n            organizationId: organizationId,\n            parameters: {\n                signWith,\n                payload: message,\n                encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n                hashFunction: \"HASH_FUNCTION_NO_OP\",\n            },\n            timestampMs: String(Date.now()), // millisecond timestamp\n        });\n        const { id, status, type } = activity;\n        if (status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Invalid activity status: ${activity.status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        result = assertNonNull(activity?.result?.signRawPayloadResult);\n    }\n    else {\n        // Want to get ID and status back as well in the result (we won't get an error)\n        // Maybe do a try/catch?\n        result = await client.signRawPayload({\n            signWith,\n            payload: message,\n            encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n            hashFunction: \"HASH_FUNCTION_NO_OP\",\n        });\n    }\n    let assembled = (0,viem__WEBPACK_IMPORTED_MODULE_7__.serializeSignature)({\n        r: `0x${result.r}`,\n        s: `0x${result.s}`,\n        v: result.v === \"00\" ? 27n : 28n,\n    });\n    // Assemble the hex\n    return assertNonNull(assembled);\n}\nfunction assertNonNull(input) {\n    if (input == null) {\n        throw new Error(`Got unexpected ${JSON.stringify(input)}`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/viem/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebauthnStamper: () => (/* binding */ WebauthnStamper)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/./node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for a webauthn stamp\nconst stampHeaderName = \"X-Stamp-Webauthn\";\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass WebauthnStamper {\n    constructor(config) {\n        this.rpId = config.rpId;\n        this.timeout = config.timeout || defaultTimeout;\n        this.userVerification = config.userVerification || defaultUserVerification;\n        this.allowCredentials = config.allowCredentials || [];\n    }\n    async stamp(payload) {\n        const challenge = getChallengeFromPayload(payload);\n        const signingOptions = {\n            publicKey: {\n                rpId: this.rpId,\n                challenge: challenge,\n                allowCredentials: this.allowCredentials,\n                timeout: this.timeout,\n                userVerification: this.userVerification,\n            },\n        };\n        const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n        const assertion = clientGetResult.toJSON();\n        const stamp = {\n            authenticatorData: assertion.response.authenticatorData,\n            clientDataJson: assertion.response.clientDataJSON,\n            credentialId: assertion.id,\n            signature: assertion.response.signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: JSON.stringify(stamp),\n        };\n    }\n}\nfunction getChallengeFromPayload(payload) {\n    const hexString = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_1__.createHash)().update(payload).digest(\"hex\");\n    return new TextEncoder().encode(hexString);\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Q7QUFDRDs7QUFFL0M7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxzQ0FBc0MsNkRBQUc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2REFBVTtBQUNoQztBQUNBOztBQUUyQjtBQUMzQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYWNoYVxcVGVzdFxcZXRoZ2xcXG5vZGVfbW9kdWxlc1xcQHR1cm5rZXlcXHdlYmF1dGhuLXN0YW1wZXJcXGRpc3RcXGluZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXQgfSBmcm9tICcuL3dlYmF1dGhuLWpzb24vaW5kZXgubWpzJztcbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdzaGEyNTYtdWludDhhcnJheSc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBIZWFkZXIgbmFtZSBmb3IgYSB3ZWJhdXRobiBzdGFtcFxuY29uc3Qgc3RhbXBIZWFkZXJOYW1lID0gXCJYLVN0YW1wLVdlYmF1dGhuXCI7XG5jb25zdCBkZWZhdWx0VGltZW91dCA9IDUgKiA2MCAqIDEwMDA7IC8vIGZpdmUgbWludXRlc1xuY29uc3QgZGVmYXVsdFVzZXJWZXJpZmljYXRpb24gPSBcInByZWZlcnJlZFwiO1xuLyoqXG4gKiBTdGFtcGVyIHRvIHVzZSB3aXRoIGBAdHVybmtleS9odHRwYCdzIGBUdXJua2V5Q2xpZW50YFxuICovXG5jbGFzcyBXZWJhdXRoblN0YW1wZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLnJwSWQgPSBjb25maWcucnBJZDtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQgfHwgZGVmYXVsdFRpbWVvdXQ7XG4gICAgICAgIHRoaXMudXNlclZlcmlmaWNhdGlvbiA9IGNvbmZpZy51c2VyVmVyaWZpY2F0aW9uIHx8IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uO1xuICAgICAgICB0aGlzLmFsbG93Q3JlZGVudGlhbHMgPSBjb25maWcuYWxsb3dDcmVkZW50aWFscyB8fCBbXTtcbiAgICB9XG4gICAgYXN5bmMgc3RhbXAocGF5bG9hZCkge1xuICAgICAgICBjb25zdCBjaGFsbGVuZ2UgPSBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKTtcbiAgICAgICAgY29uc3Qgc2lnbmluZ09wdGlvbnMgPSB7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgICAgICAgICBycElkOiB0aGlzLnJwSWQsXG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlOiBjaGFsbGVuZ2UsXG4gICAgICAgICAgICAgICAgYWxsb3dDcmVkZW50aWFsczogdGhpcy5hbGxvd0NyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHRoaXMudGltZW91dCxcbiAgICAgICAgICAgICAgICB1c2VyVmVyaWZpY2F0aW9uOiB0aGlzLnVzZXJWZXJpZmljYXRpb24sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjbGllbnRHZXRSZXN1bHQgPSBhd2FpdCBnZXQoc2lnbmluZ09wdGlvbnMpO1xuICAgICAgICBjb25zdCBhc3NlcnRpb24gPSBjbGllbnRHZXRSZXN1bHQudG9KU09OKCk7XG4gICAgICAgIGNvbnN0IHN0YW1wID0ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IGFzc2VydGlvbi5yZXNwb25zZS5hdXRoZW50aWNhdG9yRGF0YSxcbiAgICAgICAgICAgIGNsaWVudERhdGFKc29uOiBhc3NlcnRpb24ucmVzcG9uc2UuY2xpZW50RGF0YUpTT04sXG4gICAgICAgICAgICBjcmVkZW50aWFsSWQ6IGFzc2VydGlvbi5pZCxcbiAgICAgICAgICAgIHNpZ25hdHVyZTogYXNzZXJ0aW9uLnJlc3BvbnNlLnNpZ25hdHVyZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyTmFtZTogc3RhbXBIZWFkZXJOYW1lLFxuICAgICAgICAgICAgc3RhbXBIZWFkZXJWYWx1ZTogSlNPTi5zdHJpbmdpZnkoc3RhbXApLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpIHtcbiAgICBjb25zdCBoZXhTdHJpbmcgPSBjcmVhdGVIYXNoKCkudXBkYXRlKHBheWxvYWQpLmRpZ2VzdChcImhleFwiKTtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGhleFN0cmluZyk7XG59XG5cbmV4cG9ydCB7IFdlYmF1dGhuU3RhbXBlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBQ1o7QUFDd0I7O0FBRWhFO0FBQ0EsV0FBVyxxREFBTyxDQUFDLDZEQUFpQixFQUFFLHlFQUFnQztBQUN0RTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFx3ZWJhdXRobi1zdGFtcGVyXFxkaXN0XFx3ZWJhdXRobi1qc29uXFxhcGkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH0gZnJvbSAnLi9iYXNlNjR1cmwubWpzJztcbmltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcbmltcG9ydCB7IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uIH0gZnJvbSAnLi9zY2hlbWEubWpzJztcblxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VUb0pTT04oY3JlZGVudGlhbCkge1xuICAgIHJldHVybiBjb252ZXJ0KGJ1ZmZlclRvQmFzZTY0dXJsLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgY3JlZGVudGlhbCk7XG59XG5cbmV4cG9ydCB7IGdldFJlc3BvbnNlVG9KU09OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vYmFzZTY0dXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFx3ZWJhdXRobi1zdGFtcGVyXFxkaXN0XFx3ZWJhdXRobi1qc29uXFxiYXNlNjR1cmwubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ1ZmZlclRvQmFzZTY0dXJsKGJ1ZmZlcikge1xuICAgIC8vIEJ1ZmZlciB0byBiaW5hcnkgc3RyaW5nXG4gICAgY29uc3QgYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgY2hhckNvZGUgb2YgYnl0ZVZpZXcpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgIH1cbiAgICAvLyBCaW5hcnkgc3RyaW5nIHRvIGJhc2U2NFxuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2Eoc3RyKTtcbiAgICAvLyBCYXNlNjQgdG8gYmFzZTY0dXJsXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIGJhc2U2NHVybCBzdHJpbmcgaXMgd2VsbC1mb3JtZWQuXG4gICAgY29uc3QgYmFzZTY0dXJsU3RyaW5nID0gYmFzZTY0U3RyaW5nXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpXG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIHJldHVybiBiYXNlNjR1cmxTdHJpbmc7XG59XG5cbmV4cG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR1cmwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vY29udmVydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5RTtBQUN6RSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYWNoYVxcVGVzdFxcZXRoZ2xcXG5vZGVfbW9kdWxlc1xcQHR1cm5rZXlcXHdlYmF1dGhuLXN0YW1wZXJcXGRpc3RcXHdlYmF1dGhuLWpzb25cXGNvbnZlcnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIGV4cG9ydCB0aGVzZSB2YWx1ZXMgaW4gb3JkZXIgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIHRvIGRlZHVwbGljYXRlXG4vLyBzY2hlbWEgZGVmaW5pdGlvbnMgaW4gbWluaWZpZWQgSlMgY29kZS5cbi8vIFRPRE86IFBhcmNlbCBpc24ndCBkZWR1cGxpY2F0aW5nIHRoZXNlIHZhbHVlcy5cbmNvbnN0IGNvcHlWYWx1ZSA9IFwiY29weVwiO1xuY29uc3QgY29udmVydFZhbHVlID0gXCJjb252ZXJ0XCI7XG5mdW5jdGlvbiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hLCBpbnB1dCkge1xuICAgIGlmIChzY2hlbWEgPT09IGNvcHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgPT09IGNvbnZlcnRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY29udmVyc2lvbkZuKGlucHV0KTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5tYXAoKHYpID0+IGNvbnZlcnQoY29udmVyc2lvbkZuLCBzY2hlbWFbMF0sIHYpKTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBzY2hlbWFGaWVsZF0gb2YgT2JqZWN0LmVudHJpZXMoc2NoZW1hKSkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpZWxkLmRlcml2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzY2hlbWFGaWVsZC5kZXJpdmUoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaWVsZHMgY2FuIGJlIG51bGwgKHJhdGhlciB0aGFuIG1pc3Npbmcgb3IgYHVuZGVmaW5lZGApLCBlLmcuIHRoZVxuICAgICAgICAgICAgLy8gYHVzZXJIYW5kbGVgIGZpZWxkIG9mIHRoZSBgQXV0aGVudGljYXRvckFzc2VydGlvblJlc3BvbnNlYDpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdXRobi8jaWZhY2UtYXV0aGVudGljYXRvcmFzc2VydGlvbnJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoaW5wdXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hRmllbGQuc2NoZW1hLCBpbnB1dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc2NoZW1hLCBkZXJpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBkZXJpdmUsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlcXVpcmVkKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzY2hlbWEsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9wdGlvbmFsKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnQsIGNvbnZlcnRWYWx1ZSwgY29weVZhbHVlLCBkZXJpdmVkLCBvcHRpb25hbCwgcmVxdWlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\");\n\n\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDOztBQUU5QztBQUNBO0FBQ0EsNEJBQTRCLDJEQUFpQjtBQUM3QztBQUNBOztBQUVlO0FBQ2YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFx3ZWJhdXRobi1zdGFtcGVyXFxkaXN0XFx3ZWJhdXRobi1qc29uXFxpbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0UmVzcG9uc2VUb0pTT04gfSBmcm9tICcuL2FwaS5tanMnO1xuXG5hc3luYyBmdW5jdGlvbiBnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5nZXQob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGdldFJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmV4cG9ydCB7IGdldCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cm5rZXkvd2ViYXV0aG4tc3RhbXBlci9kaXN0L3dlYmF1dGhuLWpzb24vc2NoZW1hLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRjs7QUFFckY7QUFDQSxXQUFXLHNEQUFRLENBQUMsbURBQVM7QUFDN0Isa0JBQWtCLHNEQUFRLENBQUMsbURBQVM7QUFDcEMsZUFBZSxzREFBUSxDQUFDLG1EQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVEsQ0FBQyxtREFBUztBQUM1QixRQUFRLHNEQUFRLENBQUMsbURBQVM7QUFDMUIsV0FBVyxzREFBUSxDQUFDLHNEQUFZO0FBQ2hDLDZCQUE2QixzREFBUSxDQUFDLG1EQUFTO0FBQy9DLGNBQWMsc0RBQVE7QUFDdEIsd0JBQXdCLHNEQUFRLENBQUMsc0RBQVk7QUFDN0MsMkJBQTJCLHNEQUFRLENBQUMsc0RBQVk7QUFDaEQsbUJBQW1CLHNEQUFRLENBQUMsc0RBQVk7QUFDeEMsb0JBQW9CLHNEQUFRLENBQUMsc0RBQVk7QUFDekMsS0FBSztBQUNMLDRCQUE0QixxREFBTztBQUNuQzs7QUFFNEM7QUFDNUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FjaGFcXFRlc3RcXGV0aGdsXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFx3ZWJhdXRobi1zdGFtcGVyXFxkaXN0XFx3ZWJhdXRobi1qc29uXFxzY2hlbWEubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVpcmVkLCBvcHRpb25hbCwgZGVyaXZlZCwgY29weVZhbHVlLCBjb252ZXJ0VmFsdWUgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcblxuY29uc3Qgc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEgPSB7XG4gICAgYXBwaWQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgYXBwaWRFeGNsdWRlOiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIGNyZWRQcm9wczogb3B0aW9uYWwoY29weVZhbHVlKSxcbn07XG4vLyBgbmF2aWdhdG9yLmdldCgpYCByZXNwb25zZVxuY29uc3QgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24gPSB7XG4gICAgdHlwZTogcmVxdWlyZWQoY29weVZhbHVlKSxcbiAgICBpZDogcmVxdWlyZWQoY29weVZhbHVlKSxcbiAgICByYXdJZDogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICBhdXRoZW50aWNhdG9yQXR0YWNobWVudDogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICByZXNwb25zZTogcmVxdWlyZWQoe1xuICAgICAgICBjbGllbnREYXRhSlNPTjogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHNpZ25hdHVyZTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgdXNlckhhbmRsZTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICB9KSxcbiAgICBjbGllbnRFeHRlbnNpb25SZXN1bHRzOiBkZXJpdmVkKHNpbXBsaWZpZWRDbGllbnRFeHRlbnNpb25SZXN1bHRzU2NoZW1hLCAocGtjKSA9PiBwa2MuZ2V0Q2xpZW50RXh0ZW5zaW9uUmVzdWx0cygpKSxcbn07XG5cbmV4cG9ydCB7IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWEubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\n");

/***/ })

};
;